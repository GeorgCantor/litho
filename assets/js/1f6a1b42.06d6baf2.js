"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3793],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>h,useMDXComponents:()=>m,withMDXComponents:()=>d});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},i.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),d=function(e){return function(n){var t=m(n.components);return o.createElement(e,i({},n,{components:t}))}},m=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=m(e.components);return o.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=m(t),p=a,f=d["".concat(l,".").concat(p)]||d[p]||u[p]||i;return t?o.createElement(f,r(r({ref:n},c),{},{components:t})):o.createElement(f,r({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=f;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var c=2;c<i;c++)l[c]=t[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},85800:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>m});var o=t(83117),a=t(80102),i=(t(67294),t(3905)),l=["components"],r={id:"lazycollections",title:"Introduction"},s=void 0,c={unversionedId:"kotlin/lazycollections/lazycollections",id:"kotlin/lazycollections/lazycollections",title:"Introduction",description:"Lazy Collections are a Kotlin-only API. If using Java or looking for docs on the older Java codegen-based Sections API, see Sections Basics in the 'Codegen APIs' section.",source:"@site/../docs/kotlin/lazycollections/lazycollections.mdx",sourceDirName:"kotlin/lazycollections",slug:"/kotlin/lazycollections/",permalink:"/docs/kotlin/lazycollections/",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/kotlin/lazycollections/lazycollections.mdx",tags:[],version:"current",frontMatter:{id:"lazycollections",title:"Introduction"},sidebar:"mainSidebar",previous:{title:"Keys and Component Identity",permalink:"/docs/mainconcepts/coordinate-state-actions/keys-and-identity"},next:{title:"Layout and Styling",permalink:"/docs/kotlin/lazycollections/lazycollections-layout"}},d={},m=[{value:"Lazy Collection Basics",id:"lazy-collection-basics",level:3},{value:"Adding Children",id:"adding-children",level:4},{value:"Why not just use <code>Column</code> or <code>Row</code>?",id:"why-not-just-use-column-or-row",level:3},{value:"Next Steps",id:"next-steps",level:3}],p={toc:m};function u(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.mdx)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"Lazy Collections are a Kotlin-only API. If using Java or looking for docs on the older Java codegen-based Sections API, see ",(0,i.mdx)("a",{parentName:"p",href:"/docs/sections/start"},"Sections Basics")," in the 'Codegen APIs' section.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Lazy Collections")," are components that can efficiently render a scrollable list of child components using Android's ",(0,i.mdx)("inlineCode",{parentName:"p"},"RecyclerView"),". The 'lazy' in the name refers to the fact that not all children need to be immediately resolved to put content on the screen. Instead, a Lazy Collection maintains a window of resolved children, which is dynamically updated while scrolling."),(0,i.mdx)("p",null,"Lazy Collections are available as follows:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyList.kt"},"LazyList")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyGrid.kt"},"LazyGrid")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyStaggeredGrid.kt"},"LazyStaggeredGrid"))),(0,i.mdx)("h3",{id:"lazy-collection-basics"},"Lazy Collection Basics"),(0,i.mdx)("p",null,"The following code creates a ",(0,i.mdx)("inlineCode",{parentName:"p"},"LazyList")," and adds a child ",(0,i.mdx)("inlineCode",{parentName:"p"},"Text")," component for each list item."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt start=start_lazy_list_example end=end_lazy_list_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt",start:"start_lazy_list_example",end:"end_lazy_list_example"},"class FriendLazyList(private val friends: List<Person>) : KComponent() {\n  override fun ComponentScope.render(): Component = LazyList {\n    children(friends, id = { it.id }) { Text(it.name) }\n  }\n}\n")),(0,i.mdx)("h4",{id:"adding-children"},"Adding Children"),(0,i.mdx)("p",null,"An important difference from adding children in a normal container like ",(0,i.mdx)("inlineCode",{parentName:"p"},"Column")," is that each child needs a consistent and unique id. This id is used to detect moves, insertions, deletions, and updates across render passes."),(0,i.mdx)("p",null,"There are two primary ways to add children to a Lazy Collection:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"child")," - takes a component and an ",(0,i.mdx)("em",{parentName:"li"},"optional")," ",(0,i.mdx)("inlineCode",{parentName:"li"},"id")," parameter - if ",(0,i.mdx)("inlineCode",{parentName:"li"},"id")," is null or not provided, an id will be generated based on the sequence and type of this child in the list (i.e. 'third Text'). This auto-generated id may be fine, but an explicit one is safer!"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"children")," - takes a lambda mapping a list of data to a list of components and a ",(0,i.mdx)("em",{parentName:"li"},"mandataory")," ",(0,i.mdx)("inlineCode",{parentName:"li"},"id")," function that maps data to an id for that component.")),(0,i.mdx)("p",null,"For more information on how to make sure updates are applied to your Lazy List correctly and efficiently, see the ",(0,i.mdx)("a",{parentName:"p",href:"/docs/kotlin/lazycollections/lazycollections-working-with-updates"},"Working with Updates docs"),"."),(0,i.mdx)("h3",{id:"why-not-just-use-column-or-row"},"Why not just use ",(0,i.mdx)("inlineCode",{parentName:"h3"},"Column")," or ",(0,i.mdx)("inlineCode",{parentName:"h3"},"Row"),"?"),(0,i.mdx)("p",null,"A simple, but non-scalable approach to render a list of components is to use a ",(0,i.mdx)("inlineCode",{parentName:"p"},"Column")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"Row")," container:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt start=start_column_example end=end_column_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt",start:"start_column_example",end:"end_column_example"},"class FriendsColumn(private val friends: List<Person>) : KComponent() {\n  override fun ComponentScope.render(): Component = VerticalScroll {\n    Column { friends.forEach { friend -> child(Text(friend.name)) } }\n  }\n}\n")),(0,i.mdx)("p",null,"The above component creates a ",(0,i.mdx)("inlineCode",{parentName:"p"},"Column")," and adds a child ",(0,i.mdx)("inlineCode",{parentName:"p"},"Text")," component for each friend: it's made scrollable by wrapping it in a ",(0,i.mdx)("inlineCode",{parentName:"p"},"VerticalScroll"),"."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"This approach is inefficient and inflexible when dealing with many items.")),(0,i.mdx)("p",null,"Consider a user with 100 friends. During the resolution of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Column"),", the associated 100 ",(0,i.mdx)("inlineCode",{parentName:"p"},"Text")," components would also be resolved despite only a few being visible on the screen initially. Additionally, if one of the names was updated or changed position, all 100 ",(0,i.mdx)("inlineCode",{parentName:"p"},"Text")," components would be resolved again."),(0,i.mdx)("p",null,"A more efficient and flexible approach is to use Lazy Collections."),(0,i.mdx)("h3",{id:"next-steps"},"Next Steps"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Layouts")," - for information on how to customize the rendering of a list, see the ",(0,i.mdx)("a",{parentName:"li",href:"/docs/kotlin/lazycollections/lazycollections-layout"},"Layout and Styling")," page."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Interactions")," - to learn how to interact with and listen to events on a list, see the ",(0,i.mdx)("a",{parentName:"li",href:"/docs/kotlin/lazycollections/lazycollections-interactions"},"Interactions")," page."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Performance")," - for details on how to make sure a list handles updates efficiently, refer to the ",(0,i.mdx)("a",{parentName:"li",href:"/docs/kotlin/lazycollections/lazycollections-working-with-updates"},"Working with Updates")," page."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Migrating from Sections")," - if you're migrating an existing list from the Sections API, have a look at the ",(0,i.mdx)("a",{parentName:"li",href:"/docs/kotlin/lazycollections/lazycollections-sections-migration"},"Sections Migration Guide"),".")))}u.isMDXComponent=!0}}]);