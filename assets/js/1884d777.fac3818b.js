"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5483],{75960:(e,n,a)=>{a.d(n,{Z:()=>h});var t=a(87462),o=a(67294),l=a(24544),i=a(7694),r=a(13618),m="0.41.2",p="0.41.3-SNAPSHOT",s="0.9.0",d="0.46.0",c=a(85350);const h=function(e){var n=e.language,a=e.code.replace(/{{site.lithoVersion}}/g,m).replace(/{{site.soloaderVersion}}/g,s).replace(/{{site.lithoSnapshotVersion}}/g,p).replace(/{{site.flipperVersion}}/g,d).trim(),h=(0,c.Z)().isDarkTheme?r.Z:i.Z;return o.createElement(l.ZP,(0,t.Z)({},l.lG,{code:a,language:n,theme:h}),(function(e){var n=e.className,a=e.style,t=e.tokens,l=e.getLineProps,i=e.getTokenProps;return o.createElement("pre",{className:n,style:a},t.map((function(e,n){return o.createElement("div",l({line:e,key:n}),e.map((function(e,n){return o.createElement("span",i({token:e,key:n}))})))})))}))}},41565:(e,n,a)=>{a.r(n),a.d(n,{frontMatter:()=>p,contentTitle:()=>s,metadata:()=>d,toc:()=>c,default:()=>u});var t=a(87462),o=a(63366),l=(a(67294),a(3905)),i=a(55064),r=a(58215),m=(a(75960),["components"]),p={id:"kotlin-api-basics",title:"KComponent and Props",keywords:["kcomponent","kcomponent litho","litho kcomponent"]},s=void 0,d={unversionedId:"kotlin/kotlin-api-basics",id:"kotlin/kotlin-api-basics",isDocsHomePage:!1,title:"KComponent and Props",description:"This page covers how to convert existing Component with @LayoutSpecs to Kotlin KComponent.",source:"@site/../docs/kotlin/basics.mdx",sourceDirName:"kotlin",slug:"/kotlin/kotlin-api-basics",permalink:"/docs/kotlin/kotlin-api-basics",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/kotlin/basics.mdx",tags:[],version:"current",frontMatter:{id:"kotlin-api-basics",title:"KComponent and Props",keywords:["kcomponent","kcomponent litho","litho kcomponent"]}},c=[{value:"Basics",id:"basics",children:[],level:2},{value:"Props",id:"props",children:[],level:2},{value:"Common Props",id:"common-props",children:[{value:"Java - Kotlin Compatibility",id:"java---kotlin-compatibility",children:[],level:3},{value:"Working with <code>Style</code>",id:"working-with-style",children:[],level:3}],level:2},{value:"TreeProps",id:"treeprops",children:[{value:"Declaring a TreeProp",id:"declaring-a-treeprop",children:[],level:3},{value:"Using a TreeProp",id:"using-a-treeprop",children:[],level:3}],level:2},{value:"Handles",id:"handles",children:[{value:"Creating a Handle",id:"creating-a-handle",children:[],level:3},{value:"Using a Handle",id:"using-a-handle",children:[],level:3}],level:2}],h={toc:c};function u(e){var n=e.components,a=(0,o.Z)(e,m);return(0,l.mdx)("wrapper",(0,t.Z)({},h,a,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,l.mdx)("h5",{parentName:"div"},(0,l.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,l.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.mdx)("div",{parentName:"div",className:"admonition-content"},(0,l.mdx)("p",{parentName:"div"},"This page covers how to convert existing Component with ",(0,l.mdx)("inlineCode",{parentName:"p"},"@LayoutSpecs")," to Kotlin ",(0,l.mdx)("inlineCode",{parentName:"p"},"KComponent"),".\nFor information regarding the main Components and Props, refer the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/tutorial/first-components"},"Components and Props Tutorial"),"."))),(0,l.mdx)("h2",{id:"basics"},"Basics"),(0,l.mdx)("p",null,"The most fundamental change in the Litho Kotlin API is that code generation is no longer used. This means you don't need to mark your Components as ",(0,l.mdx)("inlineCode",{parentName:"p"},"@LayoutSpecs")," or declare any other annotations in the class. Remember to leave off the 'Spec' at the end of the Component name as well!"),(0,l.mdx)("p",null,"The static method marked with ",(0,l.mdx)("inlineCode",{parentName:"p"},"@OnCreateLayout")," is replaced with a ",(0,l.mdx)("inlineCode",{parentName:"p"},"render")," function override, which returns what your component should render."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin"},'import com.facebook.litho.Component\nimport com.facebook.litho.ComponentScope\nimport com.facebook.litho.KComponent\n\nclass TestComponent : KComponent() {\n  override fun ComponentScope.render(): Component? {\n    TODO("Return a component")\n  }\n}\n')),(0,l.mdx)("h2",{id:"props"},"Props"),(0,l.mdx)("p",null,"Props are now just ",(0,l.mdx)("inlineCode",{parentName:"p"},"val")," properties on your component:"),(0,l.mdx)(i.default,{groupId:"basic",defaultValue:"kotlin_basic",values:[{label:"Kotlin",value:"kotlin_basic"},{label:"Java",value:"java_basic"}],mdxType:"Tabs"},(0,l.mdx)(r.default,{value:"kotlin_basic",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/HelloComponent.kt start=start_simple_example end=end_simple_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/HelloComponent.kt",start:"start_simple_example",end:"end_simple_example"},'class HelloComponent(private val name: String) : KComponent() {\n\n  override fun ComponentScope.render(): Component? {\n    return Text(text = "Hello $name!")\n  }\n}\n'))),(0,l.mdx)(r.default,{value:"java_basic",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/onboarding/FirstComponentSpec.java start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/onboarding/FirstComponentSpec.java",start:"start_example",end:"end_example"},'@LayoutSpec\npublic class FirstComponentSpec {\n\n  @OnCreateLayout\n  static Component onCreateLayout(ComponentContext c, @Prop String name) {\n    return Text.create(c).text("Hello " + name + "!").build();\n  }\n}\n')))),(0,l.mdx)("p",null,"Specify props to components you create as named arguments:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin"},'Text(text = "Hello $name!")\n')),(0,l.mdx)("h2",{id:"common-props"},"Common Props"),(0,l.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,l.mdx)("h5",{parentName:"div"},(0,l.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,l.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.mdx)("div",{parentName:"div",className:"admonition-content"},(0,l.mdx)("p",{parentName:"div"},(0,l.mdx)("strong",{parentName:"p"},"Definition"),": A ",(0,l.mdx)("em",{parentName:"p"},"Style")," object is an immutable, linked-list of properties to apply to a Component."))),(0,l.mdx)("p",null,"Common props, such as ",(0,l.mdx)("inlineCode",{parentName:"p"},"margin"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"clickHandler"),", and ",(0,l.mdx)("inlineCode",{parentName:"p"},"alpha"),", are now set using ",(0,l.mdx)("strong",{parentName:"p"},"Style"),"."),(0,l.mdx)("p",null,"In the Java Spec API, these common props could be applied to any Component on their builder. However, in the Kotlin API, a Component must declare it accepts a ",(0,l.mdx)("inlineCode",{parentName:"p"},"Style")," as a prop. It can then pass that ",(0,l.mdx)("inlineCode",{parentName:"p"},"Style")," object to one of the Components it renders to."),(0,l.mdx)("p",null,"The following Java and Kotlin code is functionally equivalent and results in ",(0,l.mdx)("inlineCode",{parentName:"p"},"OuterTextComponent")," resolving to a ",(0,l.mdx)("inlineCode",{parentName:"p"},"Text")," component which has alpha, padding, and a margin set on it:"),(0,l.mdx)(i.default,{groupId:"children_style",defaultValue:"kotlin_children_style",values:[{label:"Kotlin",value:"kotlin_children_style"},{label:"Java",value:"java_children_style"}],mdxType:"Tabs"},(0,l.mdx)(r.default,{value:"kotlin_children_style",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/ChildStylesExample.kt start=start_combine_style_example end=end_combine_style_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/ChildStylesExample.kt",start:"start_combine_style_example",end:"end_combine_style_example"},'class OuterTextComponent : KComponent() {\n  override fun ComponentScope.render(): Component? {\n    return InnerTextComponent(style = Style.margin(all = 8.dp))\n  }\n}\n\nclass InnerTextComponent(private val style: Style? = null) : KComponent() {\n  override fun ComponentScope.render(): Component? {\n    return Text(\n        style = Style.padding(all = 8.dp).alpha(.5f) + style,\n        text = "I accept style from a parent!")\n  }\n}\n'))),(0,l.mdx)(r.default,{value:"java_children_style",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/documentation/OuterTextComponentSpec.java start=start_combine_style_outer_example end=end_combine_style_outer_example",file:"sample/src/main/java/com/facebook/samples/litho/java/documentation/OuterTextComponentSpec.java",start:"start_combine_style_outer_example",end:"end_combine_style_outer_example"},"@LayoutSpec\nclass OuterTextComponentSpec {\n\n  @OnCreateLayout\n  static Component onCreateLayout(ComponentContext c) {\n    return InnerTextComponent.create(c).marginDip(YogaEdge.ALL, 8).build();\n  }\n}\n")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/java/documentation/InnerTextComponentSpec.java start=start_combine_style_inner_example end=end_combine_style_inner_example",file:"sample/src/main/java/com/facebook/samples/litho/java/documentation/InnerTextComponentSpec.java",start:"start_combine_style_inner_example",end:"end_combine_style_inner_example"},'@LayoutSpec\nclass InnerTextComponentSpec {\n\n  @OnCreateLayout\n  static Component onCreateLayout(ComponentContext c) {\n    return Text.create(c)\n        .text("I accept style from a parent!")\n        .paddingDip(YogaEdge.ALL, 8)\n        .alpha(.5f)\n        .build();\n  }\n}\n')))),(0,l.mdx)("p",null,"If it isn't obvious that these are equivalent, it helps to understand that in the spec API, a series of ",(0,l.mdx)("inlineCode",{parentName:"p"},"@LayoutSpec")," components resolve to a single 'node' ending with either a Row/Column or a ",(0,l.mdx)("inlineCode",{parentName:"p"},"@MountSpec")," component. All components resolving to this node share a single set of common props."),(0,l.mdx)("p",null,"For an illustration of this process, see the 6-minute YouTube video ",(0,l.mdx)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=t9wTHnCx5RM"},"Litho Lessons: Component to Screen"),"."),(0,l.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,l.mdx)("h5",{parentName:"div"},(0,l.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,l.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.mdx)("div",{parentName:"div",className:"admonition-content"},(0,l.mdx)("p",{parentName:"div"},"This API also gives flexibility to accept multiple Style objects to apply to different children since all common props are passed down explicitly!"))),(0,l.mdx)("h3",{id:"java---kotlin-compatibility"},"Java - Kotlin Compatibility"),(0,l.mdx)("p",null,"If you need to pass down a ",(0,l.mdx)("inlineCode",{parentName:"p"},"Style")," from a Java class to a Kotlin ",(0,l.mdx)("inlineCode",{parentName:"p"},"KComponent"),", use ",(0,l.mdx)("inlineCode",{parentName:"p"},"StyleCompat"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/OuterStyleComponentSpec.java start=start_combine_style_outer_example end=end_combine_style_outer_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/OuterStyleComponentSpec.java",start:"start_combine_style_outer_example",end:"end_combine_style_outer_example"},"@LayoutSpec\nclass OuterStyleComponentSpec {\n\n  @OnCreateLayout\n  static Component onCreateLayout(ComponentContext c) {\n    return new InnerTextComponent(StyleCompat.marginDip(YogaEdge.ALL, 8).build());\n  }\n}\n")),(0,l.mdx)("p",null,"For the other way around (passing ",(0,l.mdx)("inlineCode",{parentName:"p"},"style")," from Kotlin code to a Java ",(0,l.mdx)("inlineCode",{parentName:"p"},"Component Spec"),") you can use ",(0,l.mdx)("inlineCode",{parentName:"p"},".kotlinStyle()"),", which is equivalent to setting all the common props the Style defines:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/ChildStylesExample.kt start=start_combine_java_kotlin_style_example end=end_combine_java_kotlin_style_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/documentation/ChildStylesExample.kt",start:"start_combine_java_kotlin_style_example",end:"end_combine_java_kotlin_style_example"},"class OuterStyleKComponent : KComponent() {\n  override fun ComponentScope.render(): Component? {\n    val style = Style.margin(all = 8.dp)\n    return OuterStyleComponent.create(context).kotlinStyle(style).build()\n  }\n}\n")),(0,l.mdx)("h3",{id:"working-with-style"},"Working with ",(0,l.mdx)("inlineCode",{parentName:"h3"},"Style")),(0,l.mdx)("p",null,"In the above example, you may have noticed the use of ",(0,l.mdx)("inlineCode",{parentName:"p"},"+")," to combine the style passed from ",(0,l.mdx)("inlineCode",{parentName:"p"},"OuterTextComponent")," and the styles that ",(0,l.mdx)("inlineCode",{parentName:"p"},"InnerTextComponent")," defines. The ",(0,l.mdx)("inlineCode",{parentName:"p"},"+")," operator combines two styles into a single style without mutating either:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin"},"val alphaStyle = Style.alpha(1f)\nval combinedStyle = alphaStyle + Style.padding(all = 8.dp).margin(all = 8.dp)\n\n// Result:\n//   alphaStyle: (alpha: 1f)\n//   combinedStyle: (alpha: 1f) <- (padding-all: 8.dp) <- (margin-all: 8.dp)\n")),(0,l.mdx)("p",null,"Note that ordering around ",(0,l.mdx)("inlineCode",{parentName:"p"},"+")," matters: if a style property is defined twice, the ",(0,l.mdx)("strong",{parentName:"p"},"last")," definition wins:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin"},"val alphaStyle = Style.alpha(1f)\nval combinedStyle = alphaStyle + Style.padding(all = 8.dp).alpha(.5f)\n\n// Result:\n//   combinedStyle will apply padding of 8.dp and alpha of .5f\n")),(0,l.mdx)("p",null,"For reference, in the Java Spec API, if a parent component and a child component set the same common prop, the parent's definition wins. The equivalent in the Kotlin API is to have the parent style on the right-hand side of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"+")," operator."),(0,l.mdx)("h2",{id:"treeprops"},"TreeProps"),(0,l.mdx)("p",null,"A TreeProp is a special type of prop that's transparently passed from a parent component to its children. It provides a convenient way to share contextual data or utilities in a tree without having to explicitly pass val properties to every component in your hierarchy."),(0,l.mdx)("h3",{id:"declaring-a-treeprop"},"Declaring a TreeProp"),(0,l.mdx)("p",null,"In order to declare a TreeProp you need to use ",(0,l.mdx)("inlineCode",{parentName:"p"},"TreePropProvider"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/treeprops/TreePropsExampleComponent.kt start=declaring_tree_prop_start end=declaring_tree_prop_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/treeprops/TreePropsExampleComponent.kt",start:"declaring_tree_prop_start",end:"declaring_tree_prop_end"},"return TreePropProvider(\n    Typeface::class.java to Typeface.DEFAULT_BOLD,\n    String::class.java to getTextTitle(),\n    Int::class.java to Color.RED) { TreePropsChildComponent() }\n")),(0,l.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,l.mdx)("h5",{parentName:"div"},(0,l.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,l.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.mdx)("div",{parentName:"div",className:"admonition-content"},(0,l.mdx)("p",{parentName:"div"},"You can only declare one TreeProp for any one given type. If a child of ParentComponent also defines a TreeProp of the given type, it will override the value of that TreeProp for all its children (but not for itself)."))),(0,l.mdx)("h3",{id:"using-a-treeprop"},"Using a TreeProp"),(0,l.mdx)("p",null,"The child component can access the TreeProp value through a ",(0,l.mdx)("inlineCode",{parentName:"p"},"ComponentScope.getTreeProp<>()")," method that has the same type which was declared in the parents ",(0,l.mdx)("inlineCode",{parentName:"p"},"TreePropProvider")," call:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/treeprops/TreePropsChildComponent.kt start=using_tree_prop_start end=using_tree_prop_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/treeprops/TreePropsChildComponent.kt",start:"using_tree_prop_start",end:"using_tree_prop_end"},"val color = getTreeProp<Int>()\nval typeface = getTreeProp<Typeface>()\nval title = getTreeProp<String>()\n")),(0,l.mdx)("h2",{id:"handles"},"Handles"),(0,l.mdx)("p",null,"A Handle is a unique identifier that can be used to trigger events (though triggers themselves are not yet supported in the Kotlin API)."),(0,l.mdx)("h3",{id:"creating-a-handle"},"Creating a Handle"),(0,l.mdx)("p",null,"In order to create a Handle, you need to use ",(0,l.mdx)("inlineCode",{parentName:"p"},"Handle()")," and save it as either a ",(0,l.mdx)("inlineCode",{parentName:"p"},"CachedValue")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"State"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/triggers/TooltipTriggerExampleKComponent.kt start=creating_handle_start end=creating_handle_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/triggers/TooltipTriggerExampleKComponent.kt",start:"creating_handle_start",end:"creating_handle_end"},"val anchorHandle = useCached { Handle() }\n")),(0,l.mdx)("h3",{id:"using-a-handle"},"Using a Handle"),(0,l.mdx)("p",null,"To add a Handle to a component, you need to wrap the component in a ",(0,l.mdx)("inlineCode",{parentName:"p"},"handle")," function. This sets the handle on the given component."),(0,l.mdx)("p",null,"With a direct reference to the handle, you can now use it to trigger events for that component:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/triggers/TooltipTriggerExampleKComponent.kt start=using_handle_start end=using_handle_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/triggers/TooltipTriggerExampleKComponent.kt",start:"using_handle_start",end:"using_handle_end"},'handle(anchorHandle) {\n  Text(\n      text = "Tooltip anchor",\n      style = Style.margin(top = 50.dp).onVisible { showToolTip(anchorHandle) })\n}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/triggers/TooltipTriggerExampleKComponent.kt start=showing_tooltip_start end=showing_tooltip_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/triggers/TooltipTriggerExampleKComponent.kt",start:"showing_tooltip_start",end:"showing_tooltip_end"},'private fun ComponentScope.showToolTip(anchorHandle: Handle) {\n  LithoTooltipController.showTooltipOnHandle(\n      context, createTooltip("Example Tooltip"), anchorHandle, 0, 0)\n}\n')))}u.isMDXComponent=!0}}]);