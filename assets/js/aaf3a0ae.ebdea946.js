"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2522],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>m,MDXProvider:()=>d,mdx:()=>b,useMDXComponents:()=>u,withMDXComponents:()=>s});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},l.apply(this,arguments)}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=o.createContext({}),s=function(e){return function(n){var t=u(n.components);return o.createElement(e,l({},n,{components:t}))}},u=function(e){var n=o.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return o.createElement(m.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,a=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),s=u(t),d=r,h=s["".concat(a,".").concat(d)]||s[d]||p[d]||l;return t?o.createElement(h,i(i({ref:n},m),{},{components:t})):o.createElement(h,i({ref:n},m))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,a=new Array(l);a[0]=h;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var m=2;m<l;m++)a[m]=t[m];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},25870:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>m,toc:()=>u});var o=t(83117),r=t(80102),l=(t(67294),t(3905)),a=["components"],i={id:"mountable-controllers",title:"Controllers Pattern"},c=void 0,m={unversionedId:"mountablecomponents/mountable-controllers",id:"mountablecomponents/mountable-controllers",title:"Controllers Pattern",description:"The Controllers Pattern can be used to control the content from outside the component, typically from an ancestor.",source:"@site/../docs/mountablecomponents/mountable-controllers.mdx",sourceDirName:"mountablecomponents",slug:"/mountablecomponents/mountable-controllers",permalink:"/docs/mountablecomponents/mountable-controllers",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mountablecomponents/mountable-controllers.mdx",tags:[],version:"current",frontMatter:{id:"mountable-controllers",title:"Controllers Pattern"}},s={},u=[{value:"Controllers in Practice",id:"controllers-in-practice",level:2},{value:"Key points for Controllers",id:"key-points-for-controllers",level:2}],d={toc:u};function p(e){var n=e.components,t=(0,r.Z)(e,a);return(0,l.mdx)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("p",null,"The Controllers Pattern can be used to control the content from outside the component, typically from an ancestor."),(0,l.mdx)("h2",{id:"controllers-in-practice"},"Controllers in Practice"),(0,l.mdx)("p",null,"To demonstrate the use of controllers in practice, we will implement a simple TimePicker Component which can be used to show some abritary time."),(0,l.mdx)("p",null,"In the controllers code we implement simple getters and setters of the TimePicker properties."),(0,l.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,l.mdx)("h5",{parentName:"div"},(0,l.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,l.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.mdx)("div",{parentName:"div",className:"admonition-content"},(0,l.mdx)("p",{parentName:"div"},"It is important to remember that the content is necessarily nullable because the ",(0,l.mdx)("strong",{parentName:"p"},"content can get unmounted when it is out of the viewport"),". So any operation invoked on the controller should be memoized when the content is unbound so that they can be applied once the content is mounted. (see how we set the minutes and hours to the vars in the setter methods and how in ",(0,l.mdx)("inlineCode",{parentName:"p"},"bind")," we set the values back to the content)"))),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/controllers/TimePickerComponent.kt start=start_controller_code_example end=end_controller_code_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/controllers/TimePickerComponent.kt",start:"start_controller_code_example",end:"end_controller_code_example"},"class TimePickerController(var currentHour: Int, var currentMinute: Int) {\n  private val onTimeChangedListener =\n      object : TimePicker.OnTimeChangedListener {\n        override fun onTimeChanged(p0: TimePicker?, hour: Int, minute: Int) {\n          currentHour = hour\n          currentMinute = minute\n        }\n      }\n  var content: TimePicker? = null\n\n  fun getMinute(): Int? {\n    ThreadUtils.assertMainThread()\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      content?.minute ?: currentMinute\n    } else {\n      content?.currentMinute ?: currentMinute\n    }\n  }\n\n  fun setMinute(minute: Int) {\n    ThreadUtils.assertMainThread()\n    currentMinute = minute\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n      content?.minute = minute\n    } else {\n      content?.currentMinute = minute\n    }\n  }\n")),(0,l.mdx)("p",null,"The Controller must be bound and unbound from the content manually from the ",(0,l.mdx)("inlineCode",{parentName:"p"},"bind"),", and ",(0,l.mdx)("inlineCode",{parentName:"p"},"unbind")," methods of a SimpleMountable, or from the ",(0,l.mdx)("inlineCode",{parentName:"p"},"bind"),", and ",(0,l.mdx)("inlineCode",{parentName:"p"},"unbind")," methods of Binder used for the Mountable."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/controllers/TimePickerComponent.kt start=start_controller_bind_code_example end=end_controller_unbind_code_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/controllers/TimePickerComponent.kt",start:"start_controller_bind_code_example",end:"end_controller_unbind_code_example"},"fun bind(content: TimePicker) {\n  this.content = content\n  setHour(currentHour)\n  setMinute(currentMinute)\n  setTimeChangedListener()\n}\n\nfun unbind(content: TimePicker) {\n  this.content?.setOnTimeChangedListener(null)\n  this.content = null\n}\n")),(0,l.mdx)("p",null,"In the Mountable Component implementation we need to manually ",(0,l.mdx)("inlineCode",{parentName:"p"},"bind")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"unbind")," controller with the content:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/controllers/TimePickerComponent.kt start=mountable_component_start end=mountable_component_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/controllers/TimePickerComponent.kt",start:"mountable_component_start",end:"mountable_component_end"},"internal class TimePickerMountable(\n    private val controller: TimePickerController?,\n) : SimpleMountable<TimePicker>(RenderType.VIEW) {\n\n  override fun createContent(context: Context): TimePicker = TimePicker(context)\n\n  override fun mount(c: Context, content: TimePicker, layoutData: Any?) {\n    controller?.bind(content)\n  }\n\n  override fun unmount(c: Context, content: TimePicker, layoutData: Any?) {\n    controller?.unbind(content)\n  }\n")),(0,l.mdx)("p",null,"The Mountable should pass the ",(0,l.mdx)("inlineCode",{parentName:"p"},"TimePickerController")," as a constructor parameter. A small performance improvement can be achieved by putting the controller into the ",(0,l.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/use-cached"},"useCached")," hook, so it is not recreated in each rerender.\nYou can call any other methods on the controller instance easily in the code (see ",(0,l.mdx)("inlineCode",{parentName:"p"},"controller.setHour()"),")"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/controllers/ControllersExampleComponent.kt start=start_controllers_example end=end_controllers_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/controllers/ControllersExampleComponent.kt",start:"start_controllers_example",end:"end_controllers_example"},'override fun ComponentScope.render(): Component {\n  return Column(style = Style.padding(16.dp)) {\n    val initialHour = 14\n    val initialMinute = 30\n    val controller =\n        useCached(initialHour, initialMinute) { TimePickerController(initialHour, initialMinute) }\n    child(TimePickerComponent(controller = controller))\n    child(\n        Button(\n            text = "Set random time ",\n            onClick = {\n              controller.setHour((0..24).random())\n              controller.setMinute((0..60).random())\n            }))\n')),(0,l.mdx)("h2",{id:"key-points-for-controllers"},"Key points for Controllers"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"The Mountable will take a Controller as a constructor parameter."),(0,l.mdx)("li",{parentName:"ul"},"If the controller is stateful then the developer need to necessary hold the controller in state/cache otherwise state will be lost across re-renders."),(0,l.mdx)("li",{parentName:"ul"},"Should bind and unbind the controllers manually."),(0,l.mdx)("li",{parentName:"ul"},"Should maintain/update/watch state manually."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"useCached")," should be used to improve performance.")))}p.isMDXComponent=!0}}]);