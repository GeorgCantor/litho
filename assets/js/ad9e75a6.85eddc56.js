"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1785],{75960:(e,n,a)=>{a.d(n,{Z:()=>u});var t=a(87462),o=a(67294),i=a(24544),m=a(7694),l=a(13618),p="0.41.2",r="0.41.3-SNAPSHOT",s="0.9.0",d="0.46.0",c=a(85350);const u=function(e){var n=e.language,a=e.code.replace(/{{site.lithoVersion}}/g,p).replace(/{{site.soloaderVersion}}/g,s).replace(/{{site.lithoSnapshotVersion}}/g,r).replace(/{{site.flipperVersion}}/g,d).trim(),u=(0,c.Z)().isDarkTheme?l.Z:m.Z;return o.createElement(i.ZP,(0,t.Z)({},i.lG,{code:a,language:n,theme:u}),(function(e){var n=e.className,a=e.style,t=e.tokens,i=e.getLineProps,m=e.getTokenProps;return o.createElement("pre",{className:n,style:a},t.map((function(e,n){return o.createElement("div",i({line:e,key:n}),e.map((function(e,n){return o.createElement("span",m({token:e,key:n}))})))})))}))}},93422:(e,n,a)=>{a.r(n),a.d(n,{frontMatter:()=>s,contentTitle:()=>d,metadata:()=>c,toc:()=>u,default:()=>x});var t=a(87462),o=a(63366),i=(a(67294),a(3905)),m=a(44996),l=a(55064),p=a(58215),r=(a(75960),["components"]),s={id:"dynamic-props",title:"Animating View Properties with Dynamic Props"},d=void 0,c={unversionedId:"animations/dynamic-props",id:"animations/dynamic-props",isDocsHomePage:!1,title:"Animating View Properties with Dynamic Props",description:"Dynamic props are properties that are applied directly to a View or Drawable. They are updated without computing a layout or remounting. This makes them efficient for use in animations or other dynamic UIs. Dynamic props are initialised and updated using DynamicValue.",source:"@site/../docs/animations/dynamic-props.mdx",sourceDirName:"animations",slug:"/animations/dynamic-props",permalink:"/docs/animations/dynamic-props",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/animations/dynamic-props.mdx",tags:[],version:"current",frontMatter:{id:"dynamic-props",title:"Animating View Properties with Dynamic Props"},sidebar:"mainSidebar",previous:{title:"Advanced: Transitions Key Scoping",permalink:"/docs/animations/transition-key-types"},next:{title:"Handling Visibility",permalink:"/docs/mainconcepts/coordinate-state-actions/visibility-handling"}},u=[{value:"<code>DynamicValue</code>",id:"dynamicvalue",children:[],level:2},{value:"Common Dynamic Props",id:"common-dynamic-props",children:[],level:2},{value:"Custom Dynamic Props for MountSpecs",id:"custom-dynamic-props-for-mountspecs",children:[],level:2},{value:"Animating Dynamic Props",id:"animating-dynamic-props",children:[],level:2}],h={toc:u};function x(e){var n=e.components,a=(0,o.Z)(e,r);return(0,i.mdx)("wrapper",(0,t.Z)({},h,a,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,i.mdx)("h5",{parentName:"div"},(0,i.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.mdx)("div",{parentName:"div",className:"admonition-content"},(0,i.mdx)("p",{parentName:"div"},"Dynamic props are properties that are applied directly to a ",(0,i.mdx)("inlineCode",{parentName:"p"},"View")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"Drawable"),". They are updated without computing a layout or remounting. This makes them efficient for use in animations or other dynamic UIs. Dynamic props are initialised and updated using ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/DynamicValue.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"DynamicValue")),"."))),(0,i.mdx)("h2",{id:"dynamicvalue"},(0,i.mdx)("inlineCode",{parentName:"h2"},"DynamicValue")),(0,i.mdx)("p",null,"To control a dynamic prop, you should create a ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," and assign it to that prop. You can then keep a reference to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," and use it to directly set values (such as in a callback or an ",(0,i.mdx)("inlineCode",{parentName:"p"},"Animator"),"). Use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"set()")," function to set new values from the main thread. In ",(0,i.mdx)("inlineCode",{parentName:"p"},"KComponents"),", a ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," can be created using ",(0,i.mdx)("inlineCode",{parentName:"p"},"useBinding()"),"."),(0,i.mdx)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,i.mdx)("h5",{parentName:"div"},(0,i.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.mdx)("div",{parentName:"div",className:"admonition-content"},(0,i.mdx)("p",{parentName:"div"},(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue"),"s should only be updated on the main thread."))),(0,i.mdx)("h2",{id:"common-dynamic-props"},"Common Dynamic Props"),(0,i.mdx)("p",null,"The dynamic properties that are available for all ",(0,i.mdx)("inlineCode",{parentName:"p"},"Component"),"s are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Alpha"),(0,i.mdx)("li",{parentName:"ul"},"Scale X/Y"),(0,i.mdx)("li",{parentName:"ul"},"Translation X/Y"),(0,i.mdx)("li",{parentName:"ul"},"Background Color"),(0,i.mdx)("li",{parentName:"ul"},"Foreground Color"),(0,i.mdx)("li",{parentName:"ul"},"Rotation"),(0,i.mdx)("li",{parentName:"ul"},"Elevation (from Lollipop and above)")),(0,i.mdx)("p",null,"To use these, create and pass a ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue<T>")," object to the component."),(0,i.mdx)("p",null,"For Spec components these props can be set in the builder:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin"},"MyComponent.create(c).alpha(dynamicAlpha).build()\n")),(0,i.mdx)("p",null,"For ",(0,i.mdx)("inlineCode",{parentName:"p"},"KComponent"),"s they should be applied as a Style item:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin"},"MyKComponent(style = Style.alpha(dynamicAlpha))\n")),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," can be updated by calling its ",(0,i.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/DynamicValue.html#set-T-"},(0,i.mdx)("inlineCode",{parentName:"a"},"set()"))," function."),(0,i.mdx)("p",null,"The following code sample shows a ",(0,i.mdx)("inlineCode",{parentName:"p"},"Component")," that renders a square in the middle of the screen. The alpha and scale props have been set to the DynamicValue's, which are updated by two SeekBars."),(0,i.mdx)(l.default,{groupId:"state",defaultValue:"kcomponent_state",values:[{label:"KComponent",value:"kcomponent_state"},{label:"Spec",value:"spec_state"}],mdxType:"Tabs"},(0,i.mdx)(p.default,{value:"kcomponent_state",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/CommonDynamicPropsKComponent.kt  start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/CommonDynamicPropsKComponent.kt","":!0,start:"start_example",end:"end_example"},"class CommonDynamicPropsKComponent : KComponent() {\n\n  override fun ComponentScope.render(): Component? {\n    val scale = useBinding(1f)\n    val alpha = useBinding(1f)\n\n    val square =\n        Column(\n            style =\n                Style.width(100.dp)\n                    .height(100.dp)\n                    .backgroundColor(colorRes(R.color.primaryColor))\n                    .alignSelf(YogaAlign.CENTER)\n                    .scaleX(scale)\n                    .scaleY(scale)\n                    .alpha(alpha))\n\n    return Column(justifyContent = YogaJustify.SPACE_BETWEEN, style = Style.padding(all = 20.dp)) {\n      child(SeekBar(onProgressChanged = { alpha.set(it) }))\n      child(square)\n      child(SeekBar(onProgressChanged = { scale.set(it) }))\n    }\n  }\n}\n"))),(0,i.mdx)(p.default,{value:"spec_state",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/CommonDynamicPropsComponentSpec.kt  start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/CommonDynamicPropsComponentSpec.kt","":!0,start:"start_example",end:"end_example"},"@LayoutSpec\nobject CommonDynamicPropsComponentSpec {\n\n  @OnCreateInitialState\n  fun onCreateInitialState(\n      c: ComponentContext,\n      alpha: StateValue<DynamicValue<Float>>,\n      scale: StateValue<DynamicValue<Float>>,\n  ) {\n    alpha.set(DynamicValue<Float>(1f))\n    scale.set(DynamicValue<Float>(1f))\n  }\n\n  @OnCreateLayout\n  fun onCreateLayout(\n      c: ComponentContext,\n      @State alpha: DynamicValue<Float>,\n      @State scale: DynamicValue<Float>,\n  ): Component {\n    val square =\n        Column.create(c)\n            .widthDip(100f)\n            .heightDip(100f)\n            .backgroundRes(R.color.primaryColor)\n            .alignSelf(YogaAlign.CENTER)\n            .scaleX(scale)\n            .scaleY(scale)\n            .alpha(alpha)\n            .build()\n\n    return Column.create(c)\n        .justifyContent(YogaJustify.SPACE_BETWEEN)\n        .paddingDip(YogaEdge.ALL, 20f)\n        .child(\n            SeekBar.create(c).heightDip(14f).widthPercent(100f).initialValue(1f).onProgressChanged {\n              alpha.set(it)\n            })\n        .child(square)\n        .child(\n            SeekBar.create(c).heightDip(14f).widthPercent(100f).initialValue(1f).onProgressChanged {\n              scale.set(it)\n            })\n        .build()\n  }\n}\n")))),(0,i.mdx)("p",null,"The following short animation illustrates the component in action."),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,m.default)("/videos/common_dynamic_props.webm")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("p",null,"To see how other common dynamic props can be modified, see the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/tree/master/sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/AllCommonDynamicPropsKComponent.kt"},"All Common Dynamic Props")," example in the Sample app, which is illustrated in the following animation."),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,m.default)("/videos/all_dynamic_props.webm")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("h2",{id:"custom-dynamic-props-for-mountspecs"},"Custom Dynamic Props for MountSpecs"),(0,i.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,i.mdx)("h5",{parentName:"div"},(0,i.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.mdx)("div",{parentName:"div",className:"admonition-content"},(0,i.mdx)("p",{parentName:"div"},(0,i.mdx)("inlineCode",{parentName:"p"},"MountSpec"),"s are only available in the Spec API.  There is currently no equivalent in the KComponent API."))),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"MountSpec"),"s can define custom dynamic props. Props annotated with ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Prop(dynamic = true)")," can be set to a ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue"),". Setting this value will trigger a custom ",(0,i.mdx)("inlineCode",{parentName:"p"},"@OnBindDynamicValue")," function in the component."),(0,i.mdx)("p",null,"Consider a ",(0,i.mdx)("inlineCode",{parentName:"p"},"MountSpec")," that renders a clock face:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/ClockFaceSpec.kt  start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/ClockFaceSpec.kt","":!0,start:"start_example",end:"end_example"},"@MountSpec\nobject ClockFaceSpec {\n\n  @OnCreateMountContent\n  fun onCreateMountContent(androidContext: Context): SimpleClockView {\n    return SimpleClockView(androidContext)\n  }\n\n  @OnBindDynamicValue\n  fun onBindTime(simpleClockView: SimpleClockView, @Prop(dynamic = true) time: Long) {\n    simpleClockView.time = time\n  }\n}\n")),(0,i.mdx)("p",null,"Here, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"MountSpec")," delegates the drawing of a clock face to ",(0,i.mdx)("inlineCode",{parentName:"p"},"SimpleClockView"),". Marking the ",(0,i.mdx)("inlineCode",{parentName:"p"},"time")," prop with ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Prop(dynamic = true)")," will cause an additional method to be generated in the builder that accepts a ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue"),". The method to set a static value will also remain available. When ",(0,i.mdx)("inlineCode",{parentName:"p"},"set()")," is called on the ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue"),", the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@OnBindDynamicValue")," function will be executed. In this example, the new time is passed to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"ClockView")," to draw the updated clock face."),(0,i.mdx)("p",null,"Next, consider a slider to set the time on the clock face."),(0,i.mdx)(l.default,{groupId:"state",defaultValue:"kcomponent_state",values:[{label:"KComponent",value:"kcomponent_state"},{label:"Spec",value:"spec_state"}],mdxType:"Tabs"},(0,i.mdx)(p.default,{value:"kcomponent_state",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/CustomDynamicPropsKComponent.kt  start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/CustomDynamicPropsKComponent.kt","":!0,start:"start_example",end:"end_example"},"class CustomDynamicPropsKComponent : KComponent() {\n\n  override fun ComponentScope.render(): Component? {\n    val time = useBinding(0L)\n\n    return Column(style = Style.padding(all = 20.dp)) {\n      child(SeekBar { time.set((it * TimeUnit.HOURS.toMillis(12)).toLong()) })\n      child(\n          ClockFace.create(context)\n              .time(time)\n              .widthDip(200f)\n              .heightDip(200f)\n              .marginDip(YogaEdge.TOP, 20f)\n              .alignSelf(YogaAlign.CENTER)\n              .build())\n    }\n  }\n}\n"))),(0,i.mdx)(p.default,{value:"spec_state",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/CustomDynamicPropsComponentSpec.kt  start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/CustomDynamicPropsComponentSpec.kt","":!0,start:"start_example",end:"end_example"},"@LayoutSpec\nobject CustomDynamicPropsComponentSpec {\n\n  @OnCreateInitialState\n  fun onCreateInitialState(c: ComponentContext, time: StateValue<DynamicValue<Long>>) {\n    time.set(DynamicValue<Long>(0))\n  }\n\n  @OnCreateLayout\n  fun onCreateLayout(c: ComponentContext, @State time: DynamicValue<Long>): Component =\n      Column.create(c)\n          .alignItems(YogaAlign.CENTER)\n          .paddingDip(YogaEdge.ALL, 20f)\n          .child(\n              SeekBar.create(c)\n                  .heightDip(14f)\n                  .widthPercent(100f)\n                  .initialValue(1f)\n                  .onProgressChanged { time.set((it * TimeUnit.HOURS.toMillis(12)).toLong()) })\n          .child(\n              ClockFace.create(c)\n                  .time(time)\n                  .widthDip(200f)\n                  .heightDip(200f)\n                  .marginDip(YogaEdge.TOP, 20f)\n                  .build())\n          .build()\n}\n")))),(0,i.mdx)("p",null,"This is illustrated in the following short animation."),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,m.default)("/videos/custom_prop_slider.webm")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("h2",{id:"animating-dynamic-props"},"Animating Dynamic Props"),(0,i.mdx)("p",null,"Dynamic Props values can be used with Android Animators to create custom animations. The following example uses a ",(0,i.mdx)("a",{parentName:"p",href:"https://developer.android.com/reference/android/animation/ValueAnimator"},"ValueAnimator")," to animate the dynamic value ",(0,i.mdx)("inlineCode",{parentName:"p"},"time"),", defined in the previous value."),(0,i.mdx)(l.default,{groupId:"state",defaultValue:"kcomponent_state",values:[{label:"KComponent",value:"kcomponent_state"},{label:"Spec",value:"spec_state"}],mdxType:"Tabs"},(0,i.mdx)(p.default,{value:"kcomponent_state",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/AnimateDynamicPropsKComponent.kt  start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/AnimateDynamicPropsKComponent.kt","":!0,start:"start_example",end:"end_example"},'class AnimateDynamicPropsKComponent : KComponent() {\n\n  override fun ComponentScope.render(): Component {\n    val time = useBinding(0L)\n    val animator = useRef<ValueAnimator?> { null }\n\n    val startAnimator: (ClickEvent) -> Unit = {\n      animator.value?.cancel()\n      animator.value =\n          ValueAnimator.ofInt(0, TimeUnit.HOURS.toMillis(12).toInt()).apply {\n            duration = 2000\n            interpolator = AccelerateDecelerateInterpolator()\n            addUpdateListener { time.set((it.animatedValue as Int).toLong()) }\n          }\n      animator.value?.start()\n    }\n\n    return Column(alignItems = YogaAlign.CENTER, style = Style.padding(all = 20.dp)) {\n      child(Text("Click to Start Animation", style = Style.onClick(startAnimator)))\n      child(\n          ClockFace.create(context)\n              .time(time)\n              .widthDip(200f)\n              .heightDip(200f)\n              .marginDip(YogaEdge.TOP, 20f)\n              .build())\n    }\n  }\n}\n'))),(0,i.mdx)(p.default,{value:"spec_state",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/AnimateDynamicPropsComponentSpec.kt  start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/animations/dynamicprops/AnimateDynamicPropsComponentSpec.kt","":!0,start:"start_example",end:"end_example"},'@LayoutSpec\nobject AnimateDynamicPropsComponentSpec {\n\n  @OnCreateInitialState\n  fun onCreateInitialState(\n      c: ComponentContext,\n      time: StateValue<DynamicValue<Long>>,\n      animator: StateValue<AtomicReference<ValueAnimator?>>,\n  ) {\n    time.set(DynamicValue<Long>(0))\n    animator.set(AtomicReference<ValueAnimator?>(null))\n  }\n\n  @OnCreateLayout\n  fun onCreateLayout(\n      c: ComponentContext,\n      @State time: DynamicValue<Long>,\n      @State animator: AtomicReference<ValueAnimator?>,\n  ): Component? {\n    val startAnimator: (ClickEvent) -> Unit = {\n      animator.get()?.let { it.cancel() }\n      animator.set(\n          ValueAnimator.ofInt(0, TimeUnit.HOURS.toMillis(12).toInt()).apply {\n            duration = 2000\n            interpolator = AccelerateDecelerateInterpolator()\n            addUpdateListener { time.set((it.animatedValue as Int).toLong()) }\n          })\n      animator.get()?.start()\n    }\n\n    return Column.create(c)\n        .paddingDip(YogaEdge.ALL, 20f)\n        .alignItems(YogaAlign.CENTER)\n        .child(\n            Text.create(c)\n                .text("Click to Start Animation")\n                .clickHandler(eventHandler(startAnimator)))\n        .child(\n            ClockFace.create(c)\n                .time(time)\n                .widthDip(200f)\n                .heightDip(200f)\n                .marginDip(YogaEdge.TOP, 20f)\n                .build())\n        .build()\n  }\n}\n')))),(0,i.mdx)("p",null,"A ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," is used to represent time.  This is passed to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Component")," as a prop and kept as a reference to it so it can be updated. In a click event, a ValueAnimator is set up that updates the time ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," each frame (see the following animation). The ",(0,i.mdx)("a",{parentName:"p",href:"https://developer.android.com/reference/android/animation/ValueAnimator"},"ValueAnimator")," is stored in a reference so that it can be cancelled if necessary."),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,m.default)("/videos/custom_prop_animation.webm")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("p",null,"For more examples of creating Animations using Common Dynamic Props, see the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/tree/master/sample/src/main/java/com/facebook/samples/litho/java/animations/animationcookbook"},"Animations Cook Book")," in the Sample App."))}x.isMDXComponent=!0}}]);