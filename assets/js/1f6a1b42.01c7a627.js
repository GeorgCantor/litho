"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3793],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>p,mdx:()=>y,useMDXComponents:()=>d,withMDXComponents:()=>m});var o=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},a.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,l=function(e,t){if(null==e)return{};var n,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=o.createContext({}),m=function(e){return function(t){var n=d(t.components);return o.createElement(e,a({},t,{components:n}))}},d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=d(n),p=l,f=m["".concat(i,".").concat(p)]||m[p]||u[p]||a;return n?o.createElement(f,r(r({ref:t},s),{},{components:n})):o.createElement(f,r({ref:t},s))}));function y(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=f;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:l,i[1]=r;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},85800:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>r,contentTitle:()=>c,metadata:()=>s,toc:()=>m,default:()=>p});var o=n(87462),l=n(63366),a=(n(67294),n(3905)),i=["components"],r={id:"lazycollections",title:"Lazy Collections"},c=void 0,s={unversionedId:"kotlin/lazycollections/lazycollections",id:"kotlin/lazycollections/lazycollections",isDocsHomePage:!1,title:"Lazy Collections",description:"Motivation",source:"@site/../docs/kotlin/lazycollections/lazycollections.mdx",sourceDirName:"kotlin/lazycollections",slug:"/kotlin/lazycollections/lazycollections",permalink:"/docs/kotlin/lazycollections/lazycollections",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/kotlin/lazycollections/lazycollections.mdx",tags:[],version:"current",frontMatter:{id:"lazycollections",title:"Lazy Collections"}},m=[{value:"Motivation",id:"motivation",children:[],level:2},{value:"Lazy Collections",id:"lazy-collections",children:[],level:2}],d={toc:m};function p(e){var t=e.components,n=(0,l.Z)(e,i);return(0,a.mdx)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h2",{id:"motivation"},"Motivation"),(0,a.mdx)("p",null,"A simple, but non-scalable method to render a list of components is to use a ",(0,a.mdx)("inlineCode",{parentName:"p"},"Column")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"Row")," container:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt start=start_column_example end=end_column_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt",start:"start_column_example",end:"end_column_example"},"class FriendsColumn(private val friends: List<Person>) : KComponent() {\n  override fun ComponentScope.render(): Component = VerticalScroll {\n    Column { friends.forEach { friend -> child(Text(friend.name)) } }\n  }\n}\n")),(0,a.mdx)("p",null,"The above example creates a ",(0,a.mdx)("inlineCode",{parentName:"p"},"Column")," and adds child ",(0,a.mdx)("inlineCode",{parentName:"p"},"Text")," component for each friend. It's made scrollable by wrapping it in a ",(0,a.mdx)("inlineCode",{parentName:"p"},"VerticalScroll"),"."),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"This approach is inefficient and inflexible when dealing with many items or when the items are expected to be updated.")),(0,a.mdx)("p",null,"Consider if there were 100 friends. During the layout of the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Column")," you would also layout 100 ",(0,a.mdx)("inlineCode",{parentName:"p"},"Text")," components, despite only a few being visible on the screen. If one of the names was updated or changed position, a layout of all 100 ",(0,a.mdx)("inlineCode",{parentName:"p"},"Text")," components would be triggered and the change would be applied without an animation."),(0,a.mdx)("h2",{id:"lazy-collections"},"Lazy Collections"),(0,a.mdx)("p",null,"Lazy collections are components that can efficiently render a scrollable list of child components using Android's ",(0,a.mdx)("inlineCode",{parentName:"p"},"RecyclerView"),"."),(0,a.mdx)("p",null,"Lazy collections are available as follows:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyList.kt"},"LazyList")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyGrid.kt"},"LazyGrid")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyStaggeredGrid.kt"},"LazyStaggeredGrid"),".")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt start=start_lazy_list_example end=end_lazy_list_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/FriendsCollectionKComponent.kt",start:"start_lazy_list_example",end:"end_lazy_list_example"},"class FriendLazyList(private val friends: List<Person>) : KComponent() {\n  override fun ComponentScope.render(): Component = LazyList {\n    children(friends, id = { it.id }) { Text(it.name) }\n  }\n}\n")),(0,a.mdx)("p",null,"The above example creates a ",(0,a.mdx)("inlineCode",{parentName:"p"},"LazyList")," and adds a child ",(0,a.mdx)("inlineCode",{parentName:"p"},"Text")," component for each list item. It doesn't require all children to be laid out to start showing content on screen. When adding children to a Column, you must specify an ",(0,a.mdx)("inlineCode",{parentName:"p"},"id")," parameter on each child, which is required for ",(0,a.mdx)("a",{parentName:"p",href:"/docs/kotlin/lazycollections/lazycollections-working-with-updates"},"applying updates correctly"),"."))}p.isMDXComponent=!0}}]);