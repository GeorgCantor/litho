"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6096],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>b,useMDXComponents:()=>u,withMDXComponents:()=>p});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},r.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=o.createContext({}),p=function(e){return function(n){var t=u(n.components);return o.createElement(e,r({},n,{components:t}))}},u=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return o.createElement(d.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=m(e,["components","mdxType","originalType","parentName"]),p=u(t),c=a,h=p["".concat(l,".").concat(c)]||p[c]||s[c]||r;return t?o.createElement(h,i(i({ref:n},d),{},{components:t})):o.createElement(h,i({ref:n},d))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=h;var i={};for(var m in n)hasOwnProperty.call(n,m)&&(i[m]=n[m]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var d=2;d<r;d++)l[d]=t[d];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},20082:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>m,default:()=>s,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var o=t(83117),a=t(80102),r=(t(67294),t(3905)),l=["components"],i={id:"mountable",title:"Mountable"},m=void 0,d={unversionedId:"mountablecomponents/mountable",id:"mountablecomponents/mountable",title:"Mountable",description:"A Mountable hosts all the logic to create, measure, and bind the content the Mountable Component will render.",source:"@site/../docs/mountablecomponents/mountable.mdx",sourceDirName:"mountablecomponents",slug:"/mountablecomponents/mountable",permalink:"/docs/mountablecomponents/mountable",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mountablecomponents/mountable.mdx",tags:[],version:"current",frontMatter:{id:"mountable",title:"Mountable"}},p={},u=[{value:"The lifecycle of a Mountable",id:"the-lifecycle-of-a-mountable",level:2},{value:"Creating a Mountable",id:"creating-a-mountable",level:2},{value:"Measuring the size of the content",id:"measuring-the-size-of-the-content",level:2},{value:"Content creation",id:"content-creation",level:2},{value:"Binding the content",id:"binding-the-content",level:2}],c={toc:u};function s(e){var n=e.components,t=(0,a.Z)(e,l);return(0,r.mdx)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"A Mountable hosts all the logic to create, measure, and bind the content the Mountable Component will render."),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"MountableComponent.render()")," method should return a ",(0,r.mdx)("inlineCode",{parentName:"p"},"Mountable")," implementation and any ",(0,r.mdx)("inlineCode",{parentName:"p"},"Style")," object you want to apply to the component on the ",(0,r.mdx)("inlineCode",{parentName:"p"},"MountableWithStyle")," object."),(0,r.mdx)("admonition",{type:"note"},(0,r.mdx)("p",{parentName:"admonition"},"Mountable extends ",(0,r.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/introduction-to-rendercore/#renderunit"},"RenderUnit")," - a rendering primitive. You can ",(0,r.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/introduction-to-rendercore"},"learn more about RenderUnit and RenderCore"),".")),(0,r.mdx)("h2",{id:"the-lifecycle-of-a-mountable"},"The lifecycle of a Mountable"),(0,r.mdx)("p",null,"A Mountable has four important phases in its lifecycle, which happen in the following order:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"measuring the size of the content (can happen on any thread)"),(0,r.mdx)("li",{parentName:"ol"},"creating content (can only happen on the main thread)"),(0,r.mdx)("li",{parentName:"ol"},"binding (setting) content properties (can only happen on the main thread)"),(0,r.mdx)("li",{parentName:"ol"},"unbinding (unsetting) content properties (can only happen on the main thread)")),(0,r.mdx)("p",null,"You can learn more about each of these phases in the sections below."),(0,r.mdx)("h2",{id:"creating-a-mountable"},"Creating a Mountable"),(0,r.mdx)("p",null,"In order to create a Mountable you should write an class that extends the ",(0,r.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/rendercore/Mountable.html"},"Mountable")," abstract class. Implementations directly extending the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Mountable")," class allow you to specify multiple ",(0,r.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/introduction-to-rendercore/#binder"},"Binders")," to set and unset properties on the mounted content."),(0,r.mdx)("p",null,"In the majority of cases a single ",(0,r.mdx)("inlineCode",{parentName:"p"},"Binder")," will be enough to implement the binding required for your ",(0,r.mdx)("inlineCode",{parentName:"p"},"MountableComponent"),"."),(0,r.mdx)("p",null,"For this reason a ",(0,r.mdx)("inlineCode",{parentName:"p"},"SimpleMountable")," abstract class has been created for you to implement. It encapsulates the logic of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Binder")," creation and addition, and you should just override ",(0,r.mdx)("inlineCode",{parentName:"p"},"mount()"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"unmount()")," and optionally ",(0,r.mdx)("inlineCode",{parentName:"p"},"shouldUpdate()")," method to implement setting and unsetting the properties on the content."),(0,r.mdx)("p",null,"You can see an example implementation of a SimpleMountable below:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/SimpleImageViewComponent.kt start=start_simple_mountable_example end=end_simple_mountable_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/SimpleImageViewComponent.kt",start:"start_simple_mountable_example",end:"end_simple_mountable_example"},"internal class SimpleImageViewMountable() : SimpleMountable<ImageView>(RenderType.VIEW) {\n\n  override fun createContent(context: Context): ImageView = ImageView(context)\n\n  override fun measure(context: LayoutContext<*>, widthSpec: Int, heightSpec: Int): MeasureResult {\n    return if (SizeSpec.getMode(widthSpec) == SizeSpec.UNSPECIFIED &&\n        SizeSpec.getMode(heightSpec) == SizeSpec.UNSPECIFIED) {\n      MeasureResult(defaultSize, defaultSize)\n    } else {\n      MeasureResult.withEqualDimensions(widthSpec, heightSpec, null)\n    }\n  }\n\n  override fun mount(c: Context, content: ImageView, layoutData: Any?) {\n    content.setImageDrawable(c.resources.getDrawable(R.drawable.ic_launcher))\n  }\n\n  override fun unmount(c: Context, content: ImageView, layoutData: Any?) {\n    content.setImageResource(0)\n  }\n}\n")),(0,r.mdx)("h2",{id:"measuring-the-size-of-the-content"},"Measuring the size of the content"),(0,r.mdx)("p",null,"Each Mountable should implement a ",(0,r.mdx)("inlineCode",{parentName:"p"},"measure()")," function to define how a Mountable should measure itself given arbitrary width and height specs. A ",(0,r.mdx)("inlineCode",{parentName:"p"},"MeasureResult")," object it returns should contain the width and height of the content, and optionally any layout data."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt start=measure_example_start end=measure_example_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt",start:"measure_example_start",end:"measure_example_end"},"override fun measure(context: LayoutContext<*>, widthSpec: Int, heightSpec: Int): MeasureResult {\n  return if (SizeSpec.getMode(widthSpec) == SizeSpec.UNSPECIFIED &&\n      SizeSpec.getMode(heightSpec) == SizeSpec.UNSPECIFIED) {\n    MeasureResult(defaultSize, defaultSize)\n  } else {\n    MeasureResult.withEqualDimensions(widthSpec, heightSpec, null)\n  }\n}\n")),(0,r.mdx)("p",null,"You can ",(0,r.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/mountable"},"learn different strategies to measure the content"),"."),(0,r.mdx)("h2",{id:"content-creation"},"Content creation"),(0,r.mdx)("p",null,"Each Mountable needs to create the content it hosts (either a ",(0,r.mdx)("inlineCode",{parentName:"p"},"View")," or a ",(0,r.mdx)("inlineCode",{parentName:"p"},"Drawable"),") via a ",(0,r.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/introduction-to-rendercore/#contentallocator"},"ContentAllocator"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt start=create_content_example_start end=create_content_example_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt",start:"create_content_example_start",end:"create_content_example_end"},"override fun createContent(context: Context): ImageView = ImageView(context)\n")),(0,r.mdx)("p",null,"You should also pass the type of the created content to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Mountable")," super constructor, either ",(0,r.mdx)("inlineCode",{parentName:"p"},"RenderType.VIEW")," for Views or ",(0,r.mdx)("inlineCode",{parentName:"p"},"RenderType.DRAWABLE")," for Drawables."),(0,r.mdx)("admonition",{type:"note"},(0,r.mdx)("p",{parentName:"admonition"},"The content should not be mutated based on props passed from MountableComponent to the Mountable.")),(0,r.mdx)("p",null,"In order to optimize the mount performance, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"ContentAllocator")," can also be used to define a content pooling strategy. You can ",(0,r.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/mountable"},"follow dedicated documentation page to implement this concept"),"."),(0,r.mdx)("h2",{id:"binding-the-content"},"Binding the content"),(0,r.mdx)("p",null,"A Mountable uses one or more ",(0,r.mdx)("a",{parentName:"p",href:"/docs/mountablecomponents/introduction-to-rendercore/#binder"},"Binders")," to set and unset properties on the mounted content."),(0,r.mdx)("p",null,"Each Binder should implement 3 methods:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"bind() - used to set properties"),(0,r.mdx)("li",{parentName:"ul"},"unbind() - used to unset properties"),(0,r.mdx)("li",{parentName:"ul"},"shouldUpdate() - used to decide whether properties need resetting")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt start=mount_unmount_example_start end=mount_unmount_example_end",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt",start:"mount_unmount_example_start",end:"mount_unmount_example_end"},"override fun mount(c: Context, content: ImageView, layoutData: Any?) {\n  content.setImageDrawable(c.getResources().getDrawable(R.drawable.ic_launcher))\n}\n\noverride fun unmount(c: Context, content: ImageView, layoutData: Any?) {\n  content.setImageResource(0)\n  content.rotation = 0f\n  content.scaleX = 1f\n  content.scaleY = 1f\n  content.setBackgroundColor(Color.BLACK)\n}\n")),(0,r.mdx)("p",null,"Each ",(0,r.mdx)("inlineCode",{parentName:"p"},"Binder")," should be added to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Mountable")," using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"addMountUnmountExtension()")," method."),(0,r.mdx)("admonition",{type:"note"},(0,r.mdx)("p",{parentName:"admonition"},"It is important that once set, a property should be unset in the matching ",(0,r.mdx)("inlineCode",{parentName:"p"},"unbind()")," method to ensure correctness when the content is reused.")))}s.isMDXComponent=!0}}]);