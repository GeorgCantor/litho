"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9971],{7772:(e,n,t)=>{t.d(n,{Z:()=>c});var i=t(87462),o=t(67294),a=t(23746),r=t(7694),d=t(13618),m="0.47.0",p="0.48.0-SNAPSHOT",l="0.10.5",s="0.142.0",u=t(86668);const c=function(e){var n=e.language,t=e.code.replace(/{{site.lithoVersion}}/g,m).replace(/{{site.soloaderVersion}}/g,l).replace(/{{site.lithoSnapshotVersion}}/g,p).replace(/{{site.flipperVersion}}/g,s).trim(),c=(0,u.L)().isDarkTheme?d.Z:r.Z;return o.createElement(a.ZP,(0,i.Z)({},a.lG,{code:t,language:n,theme:c}),(function(e){var n=e.className,t=e.style,i=e.tokens,a=e.getLineProps,r=e.getTokenProps;return o.createElement("pre",{className:n,style:t},i.map((function(e,n){return o.createElement("div",a({line:e,key:n}),e.map((function(e,n){return o.createElement("span",r({token:e,key:n}))})))})))}))}},77074:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>x,frontMatter:()=>p,metadata:()=>s,toc:()=>c});var i=t(87462),o=t(63366),a=(t(67294),t(3905)),r=t(74866),d=t(85162),m=(t(7772),["components"]),p={id:"migrating-from-mountspecs-to-primitives",title:"Migrating from MountSpecs"},l=void 0,s={unversionedId:"kotlin/migrating-from-mountspecs-to-primitives",id:"kotlin/migrating-from-mountspecs-to-primitives",title:"Migrating from MountSpecs",description:"This page outlines the process of migrating from MountSpecs to Primitive Components.",source:"@site/../docs/kotlin/migrating-from-mountspecs-to-primitives.mdx",sourceDirName:"kotlin",slug:"/kotlin/migrating-from-mountspecs-to-primitives",permalink:"/docs/kotlin/migrating-from-mountspecs-to-primitives",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/kotlin/migrating-from-mountspecs-to-primitives.mdx",tags:[],version:"current",frontMatter:{id:"migrating-from-mountspecs-to-primitives",title:"Migrating from MountSpecs"},sidebar:"mainSidebar",previous:{title:"Introducing Hooks for State",permalink:"/docs/kotlin/hooks-for-spec-developers"},next:{title:"Flexbox Containers",permalink:"/docs/kotlin/kotlin-flexbox-containers"}},u={},c=[{value:"Setup - Adding Dependencies",id:"setup---adding-dependencies",level:2},{value:"Migrating parts belonging to Primitive Component <code>render()</code> method",id:"migrating-parts-belonging-to-primitive-component-render-method",level:2},{value:"Migrating Props and Common Props",id:"migrating-props-and-common-props",level:3},{value:"Migrating State and some other lifecycle methods",id:"migrating-state-and-some-other-lifecycle-methods",level:3},{value:"Migrating Accessibility",id:"migrating-accessibility",level:3},{value:"Migrating event handling",id:"migrating-event-handling",level:3},{value:"Migrating @OnPrepare and @OnLoadStyle lifecycle methods",id:"migrating-onprepare-and-onloadstyle-lifecycle-methods",level:3},{value:"Migrating parts belonging to the <code>Primitive</code> object",id:"migrating-parts-belonging-to-the-primitive-object",level:2},{value:"Migrating @OnMeasure and @OnBoundsDefined",id:"migrating-onmeasure-and-onboundsdefined",level:3},{value:"Migrating @OnCreateContent",id:"migrating-oncreatecontent",level:3},{value:"Migrating content pooling and pre-allocation",id:"migrating-content-pooling-and-pre-allocation",level:3},{value:"Migrating Binding and Mounting (properties setting) - @OnMount, @OnBind, @OnUnbind, @OnUnmount, and @OnShouldUpdate",id:"migrating-binding-and-mounting-properties-setting---onmount-onbind-onunbind-onunmount-and-onshouldupdate",level:3},{value:"Migrating @OnBindDynamicValue using bindTo API",id:"migrating-onbinddynamicvalue-using-bindto-api",level:3},{value:"Migrating @OnTrigger using Controllers Pattern",id:"migrating-ontrigger-using-controllers-pattern",level:3},{value:"Migrating hasChildLithoViews parameter",id:"migrating-haschildlithoviews-parameter",level:3},{value:"Migrating isPureRender parameter",id:"migrating-ispurerender-parameter",level:3}],h={toc:c},g="wrapper";function x(e){var n=e.components,t=(0,o.Z)(e,m);return(0,a.mdx)(g,(0,i.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"This page outlines the process of migrating from ",(0,a.mdx)("a",{parentName:"p",href:"/docs/codegen/mount-specs"},"MountSpecs")," to ",(0,a.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/primitivecomponents/primitive-component"},"Primitive Components"),"."),(0,a.mdx)("p",null,"Unlike MountSpecs, Primitive Components consist of two separate pieces:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"PrimitiveComponent.render()")," - a method that returns a ",(0,a.mdx)("inlineCode",{parentName:"li"},"Primitive")," and ",(0,a.mdx)("inlineCode",{parentName:"li"},"Style")," that will be applied to it."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"Primitive")," - an object that hosts the logic for measuring, creation, and setting properties on the mount content (a ",(0,a.mdx)("inlineCode",{parentName:"li"},"View")," or a ",(0,a.mdx)("inlineCode",{parentName:"li"},"Drawable"),").")),(0,a.mdx)("p",null,"The following two sections contain information on how to migrate MountSpec static lifecycle methods into a Primitive Component ",(0,a.mdx)("inlineCode",{parentName:"p"},"render()")," and the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Primitive")," it returns. The ",(0,a.mdx)("a",{parentName:"p",href:"/docs/kotlin/kotlin-api-cheatsheet-primitives"},"Cheatsheet")," can also be consulted for a set of links for the migration of individual aspects of existing code."),(0,a.mdx)("h2",{id:"setup---adding-dependencies"},"Setup - Adding Dependencies"),(0,a.mdx)("p",null,"To use the Kotlin Litho API, you'll need to add the following dependencies into your BUCK file:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python",metastring:'title="BUCK"',title:'"BUCK"'},'deps = [\n    "//fbandroid/libraries/components:litho_core_kotlin",\n    "//fbandroid/libraries/components/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/kotlin/widget:widget", # for widgets\n],\n')),(0,a.mdx)("p",null,"More details on the setup steps are outlined in the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/kotlin/kotlin-intro"},"Introduction and Setup")," page."),(0,a.mdx)("h2",{id:"migrating-parts-belonging-to-primitive-component-render-method"},"Migrating parts belonging to Primitive Component ",(0,a.mdx)("inlineCode",{parentName:"h2"},"render()")," method"),(0,a.mdx)("p",null,"The subsections below outline how to migrate the parts of a MountSpec that will be hosted by the Primitive Component. This includes Props and Common Props, useState and other ",(0,a.mdx)("a",{parentName:"p",href:"/docs/kotlin/hooks-for-spec-developers"},"Hooks"),", Accessibility, Event Handling, and some other MountSpec static lifecycle methods."),(0,a.mdx)("h3",{id:"migrating-props-and-common-props"},"Migrating Props and Common Props"),(0,a.mdx)("p",null,"Similar to ",(0,a.mdx)("a",{parentName:"p",href:"/docs/kotlin/kotlin-intro/#props"},"KComponents"),", Props are now just ",(0,a.mdx)("inlineCode",{parentName:"p"},"val")," properties on the ",(0,a.mdx)("inlineCode",{parentName:"p"},"PrimitiveComponent"),", and ",(0,a.mdx)("inlineCode",{parentName:"p"},"@PropDefaults")," become default values of those ",(0,a.mdx)("inlineCode",{parentName:"p"},"val")," properties."),(0,a.mdx)("p",null,"Common Props can be set using the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Style")," object which the ",(0,a.mdx)("inlineCode",{parentName:"p"},"PrimitiveComponent")," returns from ",(0,a.mdx)("inlineCode",{parentName:"p"},"render()")," method on the ",(0,a.mdx)("inlineCode",{parentName:"p"},"LithoPrimitive")," object. You can find more information on ",(0,a.mdx)("inlineCode",{parentName:"p"},"Style")," and how to work with it on the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/kotlin/kotlin-api-basics/#common-props"},"KComponent and Props")," page."),(0,a.mdx)("h3",{id:"migrating-state-and-some-other-lifecycle-methods"},"Migrating State and some other lifecycle methods"),(0,a.mdx)("p",null,"As with KComponents, most of the APIs implemented with lifecycle methods in the Mount Specs API (such as ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnCreateInitialState")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnAttached"),") have hooks equivalents in the Kotlin API."),(0,a.mdx)("p",null,"Those Hooks can be used in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"render()")," method of the ",(0,a.mdx)("inlineCode",{parentName:"p"},"PrimitiveComponent"),"."),(0,a.mdx)("p",null,"More information on how to migrate Hooks can be found on the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/kotlin/hooks-for-spec-developers"},"Hooks")," page."),(0,a.mdx)("h3",{id:"migrating-accessibility"},"Migrating Accessibility"),(0,a.mdx)("p",null,"Accessibility for Primitive Components is implemented using the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Style")," object. You can find out more about how to implement A11Y for Primitive Components on the dedicated ",(0,a.mdx)("a",{parentName:"p",href:"/docs/accessibility/"},"Accessibility")," page."),(0,a.mdx)("h3",{id:"migrating-event-handling"},"Migrating event handling"),(0,a.mdx)("p",null,"Event Handling migration works in the same way as for KComponents (for details, see the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/kotlin/event-handling"},"Event Handling")," page)."),(0,a.mdx)("h3",{id:"migrating-onprepare-and-onloadstyle-lifecycle-methods"},"Migrating @OnPrepare and @OnLoadStyle lifecycle methods"),(0,a.mdx)("p",null,"PrimitiveComponents do not provide a ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnPrepare")," lifecycle method to move heavy operations off the UI thread before the layout calculation is performed. Instead, such operations should take place in the Primitive Component's ",(0,a.mdx)("inlineCode",{parentName:"p"},"render()")," method: the result can be used directly inside of ",(0,a.mdx)("inlineCode",{parentName:"p"},"MountConfigurationScope")," block which is passed as a last argument to ",(0,a.mdx)("inlineCode",{parentName:"p"},"MountBehavior"),". Therefore, in PrimitiveComponents, there's no equivalent of ",(0,a.mdx)("a",{parentName:"p",href:"/docs/codegen/mount-specs/#inter-stage-inputs-and-outputs"},"inter-stage inputs and outputs"),"."),(0,a.mdx)("p",null,"Similar to ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnPrepare"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnLoadStyle")," lifecycle method's content should also migrate to be a part of PrimitiveComponent's ",(0,a.mdx)("inlineCode",{parentName:"p"},"render()")," method."),(0,a.mdx)("admonition",{type:"note"},(0,a.mdx)("p",{parentName:"admonition"},(0,a.mdx)("inlineCode",{parentName:"p"},"@OnLoadStyle")," lifecycle method from MountSpecs is not related to the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Style")," object used for KComponents or Primitive Components and should not be confused with it. ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnLoadStyle")," is a lifecycle method used to retrieve XML attributes with style and theme information applied via calling ",(0,a.mdx)("a",{parentName:"p",href:"https://developer.android.com/reference/android/content/res/Resources.Theme#obtainStyledAttributes(android.util.AttributeSet,%20int%5B%5D,%20int,%20int)"},"obtainStyledAttributes()"),".")),(0,a.mdx)("h2",{id:"migrating-parts-belonging-to-the-primitive-object"},"Migrating parts belonging to the ",(0,a.mdx)("inlineCode",{parentName:"h2"},"Primitive")," object"),(0,a.mdx)("p",null,"The subsections below outline how to migrate the parts of a MountSpec that will be hosted by the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Primitive"),". This includes logic to measure, create (and optionally pool), and bind the content, as well as ",(0,a.mdx)("inlineCode",{parentName:"p"},"DynamicValues")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"Controllers")," - a mechanism that replaces ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnTrigger")," static lifecycle method."),(0,a.mdx)("h3",{id:"migrating-onmeasure-and-onboundsdefined"},"Migrating @OnMeasure and @OnBoundsDefined"),(0,a.mdx)("p",null,"For MountSpecs, there are 2 measurement-related methods that are optional - ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnMeasure")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnBoundsDefined"),"."),(0,a.mdx)("p",null,"Static annotated ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnMeasure")," method could be used to define how a component should be measured during layout calculation. If width and height was explicitly set on the component, it would not be run at all."),(0,a.mdx)("p",null,"The second method, ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnBoundsDefined")," could ",(0,a.mdx)("a",{parentName:"p",href:"/docs/codegen/mount-specs/#inter-stage-inputs-and-outputs"},"receive outputs")," from ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnMeasure")," and would run after layout calculation, in order to carry out additional operations after final size of the component is known, but before the component is mounted. If ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnBoundsDefined")," method is included in the MountSpec, it is guaranteed to run once the sizes of the component has been calculated."),(0,a.mdx)("p",null,"Primitive API uses composition instead of inheritance. It means that measuring works in a significantly different way - an implementation of ",(0,a.mdx)("inlineCode",{parentName:"p"},"LayoutBehavior")," interface needs to be provided to a Primitive. ",(0,a.mdx)("inlineCode",{parentName:"p"},"LayoutBehavior")," defines ",(0,a.mdx)("inlineCode",{parentName:"p"},"layout()")," method, which is responsible for measuring the content (a ",(0,a.mdx)("inlineCode",{parentName:"p"},"View")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"Drawable"),"). ",(0,a.mdx)("inlineCode",{parentName:"p"},"layout()")," method runs at least one time, and can be run multiple times in a single layout pass (similarly to Android's ",(0,a.mdx)("inlineCode",{parentName:"p"},"View.measure()"),")."),(0,a.mdx)("p",null,"Additionally, the ",(0,a.mdx)("inlineCode",{parentName:"p"},"layout()")," method has access to the ",(0,a.mdx)("inlineCode",{parentName:"p"},"LayoutContext"),", and width and height constraints. The method should return a ",(0,a.mdx)("inlineCode",{parentName:"p"},"PrimitiveLayoutResult")," that tells the Litho framework the width and height the content requires and, optionally, any layout data which will be passed to ",(0,a.mdx)("inlineCode",{parentName:"p"},"bindWithLayoutData()")," method. This is different from",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnMeasure")," static annotated method, where the sizes needed to be set on ",(0,a.mdx)("inlineCode",{parentName:"p"},"Size")," parameter object instead."),(0,a.mdx)("p",null,"When translating a MountSpec containing both ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnMeasure")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnBoundsDefined"),", the logic needs to be merged into a single ",(0,a.mdx)("inlineCode",{parentName:"p"},"layout()")," method - there's no need to pass outputs from ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnMeasure")," to ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnBoundsDefined"),"."),(0,a.mdx)("admonition",{type:"note"},(0,a.mdx)("p",{parentName:"admonition"},"For MountSpecs that did not implement ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnMeasure")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnBoundsDefined")," at all, one of the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/primitivecomponents/primitive-measuring"},"existing")," ",(0,a.mdx)("inlineCode",{parentName:"p"},"LayoutBehavior")," implementations can be used.")),(0,a.mdx)("p",null,"For more information, see the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/primitivecomponents/primitive-measuring"},"Measuring")," page."),(0,a.mdx)("h3",{id:"migrating-oncreatecontent"},"Migrating @OnCreateContent"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"@OnCreateMountContent")," lifecycle method's equivalent for Primitive is the ",(0,a.mdx)("inlineCode",{parentName:"p"},"ViewAllocator"),"/",(0,a.mdx)("inlineCode",{parentName:"p"},"DrawableAllocator")," object passed as an argument to ",(0,a.mdx)("inlineCode",{parentName:"p"},"MountBehavior"),"."),(0,a.mdx)("p",null,"More information on Primitive content creation can be found on the dedicated ",(0,a.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/primitivecomponents/primitive/#content-creation"},"Lifecycle of a Primitive Component")," page."),(0,a.mdx)(r.default,{groupId:"migrating_from_mountspecs_tab_group",defaultValue:"mountspec_tab",values:[{label:"Mount Spec",value:"mountspec_tab"},{label:"Primitive",value:"primitive_tab"}],mdxType:"Tabs"},(0,a.mdx)(d.default,{value:"mountspec_tab",mdxType:"TabItem"},(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"@MountSpec\npublic class MyComponentSpec {\n\n  @OnCreateMountContent\n  static ImageView onCreateMountContent(Context c) {\n    return new ImageView(c);\n  }\n\n  ...\n}\n"))),(0,a.mdx)(d.default,{value:"primitive_tab",mdxType:"TabItem"},(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin"},"val primitive = Primitive(\n    mountBehavior = MountBehavior(ViewAllocator { context -> ImageView(context) }) {\n        ...\n    }\n)\n")))),(0,a.mdx)("h3",{id:"migrating-content-pooling-and-pre-allocation"},"Migrating content pooling and pre-allocation"),(0,a.mdx)("p",null,"For Primitive, instead of static annotated methods or ",(0,a.mdx)("inlineCode",{parentName:"p"},"@MountSpec")," annotation parameters, it's the ",(0,a.mdx)("inlineCode",{parentName:"p"},"ViewAllocator"),"/",(0,a.mdx)("inlineCode",{parentName:"p"},"DrawableAllocator")," object that is passed to ",(0,a.mdx)("inlineCode",{parentName:"p"},"MountBehavior"),", which can be used to configure the recycling pool and pre-allocation for content."),(0,a.mdx)("p",null,"Instead of specifying ",(0,a.mdx)("inlineCode",{parentName:"p"},"canPreallocate")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"poolSize")," parameters on the ",(0,a.mdx)("inlineCode",{parentName:"p"},"@MountSpec")," annotation, the ",(0,a.mdx)("inlineCode",{parentName:"p"},"ViewAllocator")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"DrawableAllocator")," accept ",(0,a.mdx)("inlineCode",{parentName:"p"},"canPreallocate")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"poolSize")," arguments."),(0,a.mdx)("p",null,"More information on Primitive content pooling can be found on the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/primitivecomponents/primitive-preallocation"},"Content Pooling")," page."),(0,a.mdx)(r.default,{groupId:"migrating_from_mountspecs_tab_group",defaultValue:"mountspec_tab",values:[{label:"Mount Spec",value:"mountspec_tab"},{label:"Primitive",value:"primitive_tab"}],mdxType:"Tabs"},(0,a.mdx)(d.default,{value:"mountspec_tab",mdxType:"TabItem"},(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"@MountSpec(canPreallocate = true, poolSize = 1)\npublic class MyComponentSpec {\n  ...\n}\n"))),(0,a.mdx)(d.default,{value:"primitive_tab",mdxType:"TabItem"},(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin"},"val primitive = Primitive(\n    mountBehavior = MountBehavior(ViewAllocator(canPreallocate = true, poolSize = 1) { ... })\n)\n")))),(0,a.mdx)("h3",{id:"migrating-binding-and-mounting-properties-setting---onmount-onbind-onunbind-onunmount-and-onshouldupdate"},"Migrating Binding and Mounting (properties setting) - @OnMount, @OnBind, @OnUnbind, @OnUnmount, and @OnShouldUpdate"),(0,a.mdx)("p",null,"For MountSpecs, ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnMount")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnBind")," static annotated methods ",(0,a.mdx)("a",{parentName:"p",href:"/docs/codegen/mount-specs/#mount-spec-component-lifecycle"},"could be used to set properties on content"),", along with matching ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnUnmount")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnUnbind")," to unset properties."),(0,a.mdx)("p",null,"In ",(0,a.mdx)("inlineCode",{parentName:"p"},"Primitive"),", the equivalents of those two pairs of methods are ",(0,a.mdx)("inlineCode",{parentName:"p"},"bindTo"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"bind"),", and ",(0,a.mdx)("inlineCode",{parentName:"p"},"bindWithLayoutData")," methods that are available inside of ",(0,a.mdx)("inlineCode",{parentName:"p"},"MountConfigurationScope")," block passed as an argument to ",(0,a.mdx)("inlineCode",{parentName:"p"},"MountBehavior"),"."),(0,a.mdx)("p",null,"Therefore, the contents of ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnMount")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnBind")," should be replaced with calls to ",(0,a.mdx)("inlineCode",{parentName:"p"},"bindTo"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"bind"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"bindWithLayoutData")," methods when migrating to Primitive API. If possible, each ",(0,a.mdx)("inlineCode",{parentName:"p"},"View")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"Drawable")," property should be set via a separate ",(0,a.mdx)("inlineCode",{parentName:"p"},"bind")," call. This way only the properties that have been changed will be updated. In MountSpec API all properties had to be unset and set again on every state update."),(0,a.mdx)("p",null,"More information on mounting and unmounting content properties can be found on the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/primitivecomponents/primitive/#mounting-and-unmounting-content-properties"},"Lifecycle of a Primitive Component")," page."),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"bindTo"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"bind"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"bindWithLayoutData")," methods take ",(0,a.mdx)("inlineCode",{parentName:"p"},"deps")," as an argument which is used to determine if remount needs to happen upon update. If the ",(0,a.mdx)("inlineCode",{parentName:"p"},"deps")," have not changed, the remount will be skipped. It represents an ",(0,a.mdx)("a",{parentName:"p",href:"/docs/codegen/mount-specs/#shouldupdate"},"equivalent for @ShouldUpdate")," static annotated method present in MountSpecs but allows for more fine-grained updates."),(0,a.mdx)(r.default,{groupId:"migrating_from_mountspecs_tab_group",defaultValue:"mountspec_tab",values:[{label:"Mount Spec",value:"mountspec_tab"},{label:"Primitive",value:"primitive_tab"}],mdxType:"Tabs"},(0,a.mdx)(d.default,{value:"mountspec_tab",mdxType:"TabItem"},(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},'@MountSpec\npublic class MyComponentSpec {\n\n  @OnMount\n  static void onMount(\n      ComponentContext c,\n      EditText editText,\n      @Prop CharSequence hint) {\n    editText.setHint(hint);\n  }\n\n  @OnUnmount\n  static void onUnmount(\n      ComponentContext c, EditText editText) {\n    editText.setHint("");\n  }\n\n  @ShouldUpdate\n  static boolean shouldUpdate(@Prop(optional = true) Diff<CharSequence> hint) {\n    if (!ObjectsCompat.equals(hint.getPrevious(), hint.getNext())) {\n      return true;\n    }\n\n    return false;\n  }\n\n  ...\n}\n'))),(0,a.mdx)(d.default,{value:"primitive_tab",mdxType:"TabItem"},(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin"},'val primitive = Primitive(\n    mountBehavior = MountBehavior(ViewAllocator { ... }) {\n        bind(hint) { content ->\n            content.hint = hint\n            onUnbind { content.hint = "" }\n        }\n        // or an equivalent but shorter version:\n        hint.bindTo(EditText::setHint, "")\n    }\n)\n')))),(0,a.mdx)("h3",{id:"migrating-onbinddynamicvalue-using-bindto-api"},"Migrating @OnBindDynamicValue using bindTo API"),(0,a.mdx)("p",null,"For Primitive, ",(0,a.mdx)("a",{parentName:"p",href:"/docs/codegen/dynamic-props"},"DynamicValues")," can be implemented using the ",(0,a.mdx)("inlineCode",{parentName:"p"},"bindDynamic")," API instead of ",(0,a.mdx)("inlineCode",{parentName:"p"},"bind")," APIs described in the previous section."),(0,a.mdx)("p",null,"An example can be found ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/facebook/litho/blob/75655943f348c0347d534e6931fb53b2f7f16195/sample/src/main/java/com/facebook/samples/litho/kotlin/primitives/bindto/ImageViewPrimitiveComponent.kt#L53-L63"},"here"),"."),(0,a.mdx)("h3",{id:"migrating-ontrigger-using-controllers-pattern"},"Migrating @OnTrigger using Controllers Pattern"),(0,a.mdx)("p",null,"In MountSpecs, ",(0,a.mdx)("inlineCode",{parentName:"p"},"@OnTrigger")," static annotated methods and ",(0,a.mdx)("inlineCode",{parentName:"p"},"Handle")," could be used to ",(0,a.mdx)("a",{parentName:"p",href:"/docs/codegen/trigger-events"},"trigger events with handles"),"."),(0,a.mdx)("p",null,"To implement equivalent behaviour for PrimitiveComponent, Controller pattern should be used instead."),(0,a.mdx)("p",null,"For more information and a step-by-step example, see the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/primitivecomponents/primitive-controllers"},"Controllers Pattern")," page."),(0,a.mdx)("h3",{id:"migrating-haschildlithoviews-parameter"},"Migrating hasChildLithoViews parameter"),(0,a.mdx)("p",null,"In MountSpecs, the ",(0,a.mdx)("inlineCode",{parentName:"p"},"hasChildLithoViews")," parameter could be added to the ",(0,a.mdx)("inlineCode",{parentName:"p"},"@MountSpec")," annotation to indicate whether a given component mounts views that contain component-based content that can be incrementally mounted (such as if the mounted view has a ",(0,a.mdx)("inlineCode",{parentName:"p"},"LithoView")," with incremental mount enabled)."),(0,a.mdx)("p",null,"To implement the equivalent behaviour in Primitive Component, set the ",(0,a.mdx)("inlineCode",{parentName:"p"},"doesMountRenderTreeHosts")," property to ",(0,a.mdx)("inlineCode",{parentName:"p"},"true")," inside of ",(0,a.mdx)("inlineCode",{parentName:"p"},"MountConfigurationScope")," block."),(0,a.mdx)(r.default,{groupId:"migrating_from_mountspecs_tab_group",defaultValue:"mountspec_tab",values:[{label:"Mount Spec",value:"mountspec_tab"},{label:"Primitive",value:"primitive_tab"}],mdxType:"Tabs"},(0,a.mdx)(d.default,{value:"mountspec_tab",mdxType:"TabItem"},(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"@MountSpec(hasChildLithoViews = true)\npublic class MyComponentSpec {\n  ...\n}\n"))),(0,a.mdx)(d.default,{value:"primitive_tab",mdxType:"TabItem"},(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin"},"val primitive = Primitive(\n    mountBehavior = MountBehavior(ViewAllocator { ... }) {\n        doesMountRenderTreeHosts = true\n    }\n)\n")))),(0,a.mdx)("h3",{id:"migrating-ispurerender-parameter"},"Migrating isPureRender parameter"),(0,a.mdx)("p",null,"In MountSpecs, the ",(0,a.mdx)("inlineCode",{parentName:"p"},"isPureRender")," parameter could be added to the ",(0,a.mdx)("inlineCode",{parentName:"p"},"@MountSpec")," annotation to indicate whether a given component is pure render - when the ComponentTree for this component is updated, if nothing changes then the measurements for this component can be re-used."),(0,a.mdx)("p",null,"For Primitive, there's no equivalent behaviour as all the Primitive Components are pure render, so when migrating this parameter should be ignored."))}x.isMDXComponent=!0}}]);