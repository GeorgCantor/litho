"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8911],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>m,mdx:()=>f,useMDXComponents:()=>l,withMDXComponents:()=>s});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},r.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=o.createContext({}),s=function(e){return function(n){var t=l(n.components);return o.createElement(e,r({},n,{components:t}))}},l=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=l(e.components);return o.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=l(t),m=a,h=s["".concat(i,".").concat(m)]||s[m]||u[m]||r;return t?o.createElement(h,c(c({ref:n},p),{},{components:t})):o.createElement(h,c({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=h;var c={};for(var d in n)hasOwnProperty.call(n,d)&&(c[d]=n[d]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},55582:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>c,metadata:()=>p,toc:()=>l});var o=t(83117),a=t(80102),r=(t(67294),t(3905)),i=["components"],c={id:"code-generation",title:"Code generation"},d=void 0,p={unversionedId:"codegen/code-generation",id:"codegen/code-generation",title:"Code generation",description:"This page covers the old Java Spec API. If you aren't using the Spec API, refer to the Components page.",source:"@site/../docs/codegen/code-generation.mdx",sourceDirName:"codegen",slug:"/codegen/code-generation",permalink:"/docs/codegen/code-generation",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/codegen/code-generation.mdx",tags:[],version:"current",frontMatter:{id:"code-generation",title:"Code generation"},sidebar:"mainSidebar",previous:{title:"Triggering Events with Handles",permalink:"/docs/codegen/trigger-events"},next:{title:"Intoduction and Setup",permalink:"/docs/kotlin/kotlin-intro"}},s={},l=[{value:"1. Spec model creation",id:"1-spec-model-creation",level:2},{value:"2. Spec model validation",id:"2-spec-model-validation",level:2},{value:"3. Component generation",id:"3-component-generation",level:2}],m={toc:l};function u(e){var n=e.components,t=(0,a.Z)(e,i);return(0,r.mdx)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",{parentName:"div"},"This page covers the old Java Spec API. If you aren't using the Spec API, refer to the ",(0,r.mdx)("a",{parentName:"p",href:"/docs/mainconcepts/components-basics"},"Components")," page."))),(0,r.mdx)("p",null,"Litho relies on code generation in order to create ",(0,r.mdx)("em",{parentName:"p"},"Components")," from ",(0,r.mdx)("em",{parentName:"p"},"Component Specs"),". This process utilises intermediate ",(0,r.mdx)("em",{parentName:"p"},"ComponentSpec")," representations called ",(0,r.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/specmodels/model/SpecModel.html"},"SpecModels"),", which are immutable Java objects."),(0,r.mdx)("p",null,"Code generation consists of three steps, as detailed in the following sections."),(0,r.mdx)("h2",{id:"1-spec-model-creation"},"1. Spec model creation"),(0,r.mdx)("p",null,"Spec models are created at compile time using an annotation processor, which is a tool in javac for scanning and processing annotations. The Litho annotation processor processes the annotations, methods and fields on your Component Specs and creates a Spec Model for each one."),(0,r.mdx)("h2",{id:"2-spec-model-validation"},"2. Spec model validation"),(0,r.mdx)("p",null,"Spec Models have a method called ",(0,r.mdx)("inlineCode",{parentName:"p"},"validate()")," that returns a list of ",(0,r.mdx)("a",{parentName:"p",href:"pathname:///javadoc/com/facebook/litho/specmodels/model/SpecModelValidationError.html"},"SpecModelValidationErrors"),". If this list is empty, then the Spec is well-formed and may be used to generate a valid Component. If not, then it will contain a list of errors that need to be fixed before a valid Component is generated."),(0,r.mdx)("h2",{id:"3-component-generation"},"3. Component generation"),(0,r.mdx)("p",null,"If the validation step on a Spec Model is successful, then the ",(0,r.mdx)("inlineCode",{parentName:"p"},"generate")," method may be called. This creates a ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/square/javapoet"},"Javapoet")," ",(0,r.mdx)("inlineCode",{parentName:"p"},"TypeSpec"),", which can then be easily used to create a Component class file."))}u.isMDXComponent=!0}}]);