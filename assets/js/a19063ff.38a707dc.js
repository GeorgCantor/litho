"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6926],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>p,mdx:()=>y,useMDXComponents:()=>m,withMDXComponents:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){return function(t){var n=m(t.components);return a.createElement(e,i({},t,{components:n}))}},m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=m(n),p=o,h=d["".concat(l,".").concat(p)]||d[p]||u[p]||i;return n?a.createElement(h,r(r({ref:t},s),{},{components:n})):a.createElement(h,r({ref:t},s))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=h;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},36169:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>r,contentTitle:()=>c,metadata:()=>s,toc:()=>d,default:()=>p});var a=n(87462),o=n(63366),i=(n(67294),n(3905)),l=["components"],r={id:"lazycollections-layout",title:"Layout and Styling"},c=void 0,s={unversionedId:"kotlin/lazycollections/lazycollections-layout",id:"kotlin/lazycollections/lazycollections-layout",isDocsHomePage:!1,title:"Layout and Styling",description:"Spacing",source:"@site/../docs/kotlin/lazycollections/lazycollections-layout.mdx",sourceDirName:"kotlin/lazycollections",slug:"/kotlin/lazycollections/lazycollections-layout",permalink:"/docs/kotlin/lazycollections/lazycollections-layout",editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/kotlin/lazycollections/lazycollections-layout.mdx",tags:[],version:"current",frontMatter:{id:"lazycollections-layout",title:"Layout and Styling"}},d=[{value:"Spacing",id:"spacing",children:[],level:2},{value:"Horizontal Lists",id:"horizontal-lists",children:[],level:2},{value:"Layouts",id:"layouts",children:[],level:2},{value:"Sticky Headers",id:"sticky-headers",children:[],level:2}],m={toc:d};function p(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.mdx)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h2",{id:"spacing"},"Spacing"),(0,i.mdx)("p",null,"To add spacing around and between items you can use ",(0,i.mdx)("inlineCode",{parentName:"p"},"LinearSpacing"),". This will create an ",(0,i.mdx)("inlineCode",{parentName:"p"},"ItemDecorator")," that will be applied to the underlying ",(0,i.mdx)("inlineCode",{parentName:"p"},"RecyclerView"),". It automatically takes care of edge cases including equality checks (to avoid ",(0,i.mdx)("a",{parentName:"p",href:"/docs/kotlin/lazycollections/lazycollections-working-with-updates#avoiding-unnecessary-layouts"},"unnecessary layouts"),"), orientation, and layout direction handling."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/LayoutAndStyling.kt start=start_linear_spacing_example end=end_linear_spacing_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/LayoutAndStyling.kt",start:"start_linear_spacing_example",end:"end_linear_spacing_example"},"class LinearSpacingExample : KComponent() {\n  override fun ComponentScope.render(): Component =\n      LazyList(\n          itemDecoration = LinearSpacing(start = 10.dp, between = 5.dp),\n      ) { /* Add children */\n      }\n}\n")),(0,i.mdx)("h2",{id:"horizontal-lists"},"Horizontal Lists"),(0,i.mdx)("p",null,"To make a lazy collection horizontal, set the parameter ",(0,i.mdx)("inlineCode",{parentName:"p"},"orientation = RecyclerView.HORIZONTAL"),". By default, you will also need to specify a height, such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"style = Style.height(100.dp)"),", as follows:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/LayoutAndStyling.kt start=start_fixed_height_hscroll_example end=end_fixed_height_hscroll_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/LayoutAndStyling.kt",start:"start_fixed_height_hscroll_example",end:"end_fixed_height_hscroll_example"},"class HScrollFixedHeight : KComponent() {\n  override fun ComponentScope.render(): Component =\n      LazyList(\n          orientation = RecyclerView.HORIZONTAL,\n          style = Style.height(100.dp),\n      ) { /* Add children */\n      }\n}\n")),(0,i.mdx)("p",null,"To automatically set the height, you can set the parameter ",(0,i.mdx)("inlineCode",{parentName:"p"},"crossAxisWrapMode = CrossAxisWrapMode.MatchFirstChild")," to use the height of the first child. Alternatively, set ",(0,i.mdx)("inlineCode",{parentName:"p"},"crossAxisWrapMode = CrossAxisWrapMode.Dynamic")," to match the largest item in the list."),(0,i.mdx)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,i.mdx)("h5",{parentName:"div"},(0,i.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.mdx)("div",{parentName:"div",className:"admonition-content"},(0,i.mdx)("p",{parentName:"div"},(0,i.mdx)("inlineCode",{parentName:"p"},"CrossAxisWrapMode.Dynamic")," requires measuring all the components in the list. This is inefficient and should be avoided if possible."))),(0,i.mdx)("h2",{id:"layouts"},"Layouts"),(0,i.mdx)("p",null,"Lazy collections are available as follows:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyList.kt"},"LazyList")," - arranged as a sequential list."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyGrid.kt"},"LazyGrid")," - arranged as a grid with the number of columns specified by the ",(0,i.mdx)("inlineCode",{parentName:"li"},"columns")," parameter."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"https://github.com/facebook/litho/blob/master/litho-widget-kotlin/src/main/kotlin/com/facebook/litho/widget/collection/LazyStaggeredGrid.kt"},"LazyStaggeredGrid")," - arranged into columns where children are inserted into the first column that has space.")),(0,i.mdx)("h2",{id:"sticky-headers"},"Sticky Headers"),(0,i.mdx)("p",null,"To make a child 'sticky', specify the parameter ",(0,i.mdx)("inlineCode",{parentName:"p"},"isSticky = true"),". This will cause the child to stick to the top of the Lazy Collection rather than being scrolled out of the viewport."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/collection/LayoutAndStyling.kt start=start_sticky_header_example end=end_sticky_header_example",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/collection/LayoutAndStyling.kt",start:"start_sticky_header_example",end:"end_sticky_header_example"},'class StickyHeader(val names: List<String>) : KComponent() {\n  override fun ComponentScope.render(): Component {\n    val namesGroupedByFirstLetter = names.groupBy { it.first() }\n    return LazyList {\n      namesGroupedByFirstLetter.forEach { (firstLetter, names) ->\n        child(id = firstLetter, isSticky = true, component = Text("$firstLetter"))\n        children(items = names, id = { it }) { Text(it) }\n      }\n    }\n  }\n}\n')))}p.isMDXComponent=!0}}]);