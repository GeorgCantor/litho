"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4544],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>d,mdx:()=>g,useMDXComponents:()=>l,withMDXComponents:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},a.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),m=function(e){return function(t){var n=l(t.components);return o.createElement(e,a({},t,{components:n}))}},l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,h=m["".concat(i,".").concat(d)]||m[d]||u[d]||a;return n?o.createElement(h,c(c({ref:t},s),{},{components:n})):o.createElement(h,c({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},90900:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var o=n(83117),r=n(80102),a=(n(67294),n(3905)),i=["components"],c={id:"injectprop-matching",title:"Matching @InjectProp"},p=void 0,s={unversionedId:"testing/injectprop-matching",id:"testing/injectprop-matching",title:"Matching @InjectProp",description:"For help with setting up the test environment, see the Getting Started page.",source:"@site/../docs/testing/injectprop-matching.mdx",sourceDirName:"testing",slug:"/testing/injectprop-matching",permalink:"/docs/testing/injectprop-matching",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/testing/injectprop-matching.mdx",tags:[],version:"current",frontMatter:{id:"injectprop-matching",title:"Matching @InjectProp"}},m={},l=[{value:"Testing Injected Props",id:"testing-injected-props",level:2},{value:"Testing Injected Components",id:"testing-injected-components",level:2}],d={toc:l};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.mdx)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,a.mdx)("h5",{parentName:"div"},(0,a.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,a.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Tips")),(0,a.mdx)("div",{parentName:"div",className:"admonition-content"},(0,a.mdx)("p",{parentName:"div"},"For help with setting up the test environment, see the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/testing/unit-testing"},"Getting Started")," page."),(0,a.mdx)("p",{parentName:"div"},"Before learning about ",(0,a.mdx)("inlineCode",{parentName:"p"},"@InectProp")," matching, it's recommended you become familiar with ",(0,a.mdx)("a",{parentName:"p",href:"/docs/testing/subcomponent-testing"},"sub-component testing"),"."))),(0,a.mdx)("h2",{id:"testing-injected-props"},"Testing Injected Props"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"@InjectProp")," earmarks props to be provided by the client's dependency injection framework.  Components that have injected props can be tested using a ",(0,a.mdx)("inlineCode",{parentName:"p"},"@TestSpec")," and the prop-matching APIs."),(0,a.mdx)("p",null,"Consider the following LayoutSpec:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"@LayoutSpec\nclass MyInjectPropSpec {\n  @OnCreateLayout\n  static Component onCreateLayout(\n      ComponentContext c,\n      @Prop String normalProp,\n      @InjectProp UserController injectedProp,\n      @InjectProp ProfilePictureComponent profilePicture) {\n    // ...\n  }\n}\n")),(0,a.mdx)("p",null,"To test using injected props, take the following steps:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Create a ",(0,a.mdx)("inlineCode",{parentName:"li"},"@TestSpec")," for ",(0,a.mdx)("strong",{parentName:"li"},"MyInjectPropSpec"),":")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"@TestSpec(MyInjectPropSpec.class)\npublic interface TestMyInjectPropSpec {}\n")),(0,a.mdx)("ol",{start:2},(0,a.mdx)("li",{parentName:"ol"},"Add ",(0,a.mdx)("inlineCode",{parentName:"li"},"@RunWith(LithoTestRunner.class)")," to the top of the test class."),(0,a.mdx)("li",{parentName:"ol"},"Add a JUnit ",(0,a.mdx)("a",{parentName:"li",href:"https://github.com/junit-team/junit4/wiki/Rules"},(0,a.mdx)("inlineCode",{parentName:"a"},"@Rule"))," ",(0,a.mdx)("inlineCode",{parentName:"li"},"LithoViewRule"),"."),(0,a.mdx)("li",{parentName:"ol"},"Add a check to ensure that tests are run in debug mode. ",(0,a.mdx)("inlineCode",{parentName:"li"},"ComponentsConfiguration.IS_INTERNAL_BUILD")," must be true.")),(0,a.mdx)("p",null,"The test class should look like the following:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},'@RunWith(LithoTestRunner.class)\npublic class InjectPropMatcherGenerationTest {\n\n  public final @Rule LithoViewRule mLithoViewRule = new LithoViewRule();\n\n  @Before\n  public void assumeInDebugMode() {\n    assumeThat(\n      "These tests can only be run in debug mode.",\n      ComponentsConfiguration.IS_INTERNAL_BUILD, is(true)\n    );\n  }\n}\n')),(0,a.mdx)("ol",{start:5},(0,a.mdx)("li",{parentName:"ol"},"Set the value of the injected props before evaluating any assertions:")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void whenMyInjectPropComponentIsRendered_shouldUseProvidedInjectProps() {\n  final ComponentContext c = mLithoViewRule.getContext();\n  final MyInjectProp component = MyInjectProp.create(c)\n        .normalProp("normal string")\n        .build();\n\n  // Set the injected prop values.\n  component.injectedString = "injected string";\n  component.injectedKettle = new Kettle(92f);\n\n  final Condition<InspectableComponent> matcher =\n      TestMyInjectProp.matcher(c)\n          .normalString("normal string")\n          .injectedString("injected string")\n          .injectedKettle(new CustomTypeSafeMatcher<MyInjectPropSpec.Kettle>("matches temperature") {\n            @Override\n            protected boolean matchesSafely(MyInjectPropSpec.Kettle item) {\n              return Math.abs(item.temperatureCelsius - 92f) < 0.1;\n            }\n          })\n          .build();\n\n  assertThat(c, component).has(deepSubComponentWith(c, matcher));\n}\n')),(0,a.mdx)("p",null,"The above example shows how tests written for injected props are almost the same as normal props.\nThe ",(0,a.mdx)("inlineCode",{parentName:"p"},"Kettle")," object is instantiated with a temperature, which is verified using a custom matcher."),(0,a.mdx)("h2",{id:"testing-injected-components"},"Testing Injected Components"),(0,a.mdx)("p",null,"Components can also be ",(0,a.mdx)("inlineCode",{parentName:"p"},"@InjectProp"),"s, as shown in the following LayoutSpec:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"@LayoutSpec\nclass MyInjectPropSpec {\n  @OnCreateLayout\n  static Component onCreateLayout(\n      ComponentContext c,\n      @InjectProp Text injectedComponent) {\n    return Column.create(c).child(injectedComponent).build();\n  }\n}\n")),(0,a.mdx)("p",null,"Assert if MyInjectProp is mounted with the injected Text component:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void whenMyInjectPropComponentIsRendered_shouldUseProvidedInjectedComponent() {\n  final ComponentContext c = mLithoViewRule.getContext();\n  final MyInjectProp component = MyInjectProp.create(c).build();\n\n  component.injectedComponent = Text.create(c).text("injected text").build();\n\n  final Condition<InspectableComponent> matcher =\n      TestMyInjectProp.matcher(c)\n          .injectedComponent(TestText.matcher(c).text("injected text").build())\n          .build();\n\n  assertThat(c, component).has(deepSubComponentWith(c, matcher));\n}\n')))}u.isMDXComponent=!0}}]);