"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1086],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>s,mdx:()=>f,useMDXComponents:()=>c,withMDXComponents:()=>p});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},i.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=o.createContext({}),p=function(e){return function(n){var t=c(n.components);return o.createElement(e,i({},n,{components:t}))}},c=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=c(e.components);return o.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},b=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=m(e,["components","mdxType","originalType","parentName"]),p=c(t),s=a,b=p["".concat(l,".").concat(s)]||p[s]||u[s]||i;return t?o.createElement(b,r(r({ref:n},d),{},{components:t})):o.createElement(b,r({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=b;var r={};for(var m in n)hasOwnProperty.call(n,m)&&(r[m]=n[m]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var d=2;d<i;d++)l[d]=t[d];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}b.displayName="MDXCreateElement"},65767:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>b,frontMatter:()=>m,metadata:()=>p,toc:()=>s});var o=t(83117),a=t(80102),i=(t(67294),t(3905)),l=t(44996),r=["components"],m={id:"mountable-bindto",title:"BindTo - Dynamic Values API"},d=void 0,p={unversionedId:"mountablecomponents/mountable-bindto",id:"mountablecomponents/mountable-bindto",title:"BindTo - Dynamic Values API",description:"Dynamic Mount Props property types enable the value of the property, on the content mounted by the SimpleMountable, to be updated without triggering a new layout (such as when animating the text colour of a Text component).",source:"@site/../docs/mountablecomponents/mountable-bindto.mdx",sourceDirName:"mountablecomponents",slug:"/mountablecomponents/mountable-bindto",permalink:"/docs/mountablecomponents/mountable-bindto",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mountablecomponents/mountable-bindto.mdx",tags:[],version:"current",frontMatter:{id:"mountable-bindto",title:"BindTo - Dynamic Values API"}},c={},s=[{value:"BindTo - Dynamic Values API in Practice",id:"bindto---dynamic-values-api-in-practice",level:2},{value:"Key points for the BindTo API",id:"key-points-for-the-bindto-api",level:2}],u={toc:s};function b(e){var n=e.components,t=(0,a.Z)(e,r);return(0,i.mdx)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Dynamic Mount Props")," property types enable the value of the property, on the content mounted by the SimpleMountable, to be updated without triggering a new layout (such as when animating the text colour of a Text component)."),(0,i.mdx)("h2",{id:"bindto---dynamic-values-api-in-practice"},"BindTo - Dynamic Values API in Practice"),(0,i.mdx)("p",null,"To illustrate the use of BindTo API in practice, you will implement a simple ",(0,i.mdx)("inlineCode",{parentName:"p"},"ImageViewComponent")," that will have ",(0,i.mdx)("inlineCode",{parentName:"p"},"background"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"rotation")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"scale")," properties animated, based on the ",(0,i.mdx)("inlineCode",{parentName:"p"},"SeekBar")," value."),(0,i.mdx)("p",null,"Start off by defining each ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," by using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"useBinding")," hook and attaching it to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"SeekBar.onProgressChanged")," callback that will change them accordingly:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/MountableBindToExampleComponent.kt start=start_bindTo_seekbar_code end=end_bindTo_seekbar_code",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/MountableBindToExampleComponent.kt",start:"start_bindTo_seekbar_code",end:"end_bindTo_seekbar_code"},'override fun ComponentScope.render(): Component? {\n  val background = useBinding(50f)\n  val rotation = useBinding(0f)\n  val scale = useBinding(1f)\n  return Column(style = Style.padding(all = 20.dp)) {\n    child(\n        SeekBar(\n            initialValue = 0f,\n            label = "background",\n            onProgressChanged = { backgroundValue -> background.set(backgroundValue) }))\n    child(\n        SeekBar(\n            initialValue = 0f,\n            label = "rotation",\n            onProgressChanged = { rotationValue ->\n              rotation.set(evaluate(rotationValue, 0f, 360f))\n            }))\n    child(\n        SeekBar(\n            initialValue = 1f,\n            label = "scale",\n            onProgressChanged = { scaleValue -> scale.set(evaluate(scaleValue, .75f, 1.25f)) }))\n')),(0,i.mdx)("p",null,"The MountableComponent, ",(0,i.mdx)("inlineCode",{parentName:"p"},"ImageViewComponent"),", will be defined as a child below the SeekBar children in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"render()")," function and will take each ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," as a constructor parameter:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/MountableBindToExampleComponent.kt start=start_bindTo_imagecomponent_def end=end_bindTo_imagecomponent_def",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/MountableBindToExampleComponent.kt",start:"start_bindTo_imagecomponent_def",end:"end_bindTo_imagecomponent_def"},"child(\n    Column(style = Style.width(100.dp).height(100.dp).margin(all = 50.dp)) {\n      child(ImageViewComponent(background = background, rotation = rotation, scale = scale))\n    })\n")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt start=start_bindTo_imagecomponent_code end=end_bindTo_imagecomponent_code",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt",start:"start_bindTo_imagecomponent_code",end:"end_bindTo_imagecomponent_code"},"class ImageViewComponent(\n    private val rotation: DynamicValue<Float>,\n    private val background: DynamicValue<Float>,\n    private val scale: DynamicValue<Float>,\n    private val style: Style? = null\n) : MountableComponent() {\n")),(0,i.mdx)("p",null,"Now, in the MountableComponent ",(0,i.mdx)("inlineCode",{parentName:"p"},"render()")," call, use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"bindTo")," API to bind each ",(0,i.mdx)("inlineCode",{parentName:"p"},"DynamicValue")," to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"ImageView")," properties."),(0,i.mdx)("p",null,"There are two ways of using ",(0,i.mdx)("inlineCode",{parentName:"p"},"BindTo"),":"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"The simpler way is to create a binding between the ",(0,i.mdx)("inlineCode",{parentName:"li"},"DynamicValue")," and function reference to the setter of the property.",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"The setter will be invoked for every update of the DynamicValue."))),(0,i.mdx)("li",{parentName:"ol"},"The more complex binding can be achieved by using a lambda and accessing the view directly, as shown in the following snippet.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt start=start_bindTo_binding_code end=end_bindTo_binding_code",file:"sample/src/main/java/com/facebook/samples/litho/kotlin/mountables/bindto/ImageViewComponent.kt",start:"start_bindTo_binding_code",end:"end_bindTo_binding_code"},"override fun MountableComponentScope.render(): MountableRenderResult {\n  // simple binding\n  rotation.bindTo(0f, ImageView::setRotation)\n  scale.bindTo(1f, ImageView::setScaleX)\n  scale.bindTo(1f, ImageView::setScaleY)\n\n  // complex binding\n  background.bindTo(0f) { view: ImageView, value ->\n    view.setBackgroundColor(Color.HSVToColor(floatArrayOf(evaluate(value, 0f, 360f), 1f, 1f)))\n  }\n")),(0,i.mdx)("p",null,"The following short video shows the BindTo API in action:"),(0,i.mdx)("video",{loop:"true",autoplay:"true",class:"video",width:"100%",height:"500px",muted:"true"},(0,i.mdx)("source",{type:"video/webm",src:(0,l.default)("/videos/bindToAPI.mov")}),(0,i.mdx)("p",null,"Your browser does not support the video element.")),(0,i.mdx)("h2",{id:"key-points-for-the-bindto-api"},"Key points for the BindTo API"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"A ",(0,i.mdx)("inlineCode",{parentName:"li"},"DynamicValue")," has to be bound to the SimpleMountable in ",(0,i.mdx)("inlineCode",{parentName:"li"},"MountableComponentScope.render()"),"."),(0,i.mdx)("li",{parentName:"ul"},"A SimpleMountable can have several dynamic props."),(0,i.mdx)("li",{parentName:"ul"},"It is possible to automatically unbind the ",(0,i.mdx)("inlineCode",{parentName:"li"},"DynamicValue")," by setting the default value after ",(0,i.mdx)("inlineCode",{parentName:"li"},"unmount()")," is called.")))}b.isMDXComponent=!0}}]);