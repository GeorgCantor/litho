"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1864],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>m,mdx:()=>x,useMDXComponents:()=>d,withMDXComponents:()=>p});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},a.apply(this,arguments)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=o.createContext({}),p=function(e){return function(t){var n=d(t.components);return o.createElement(e,a({},t,{components:n}))}},d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=i,u=p["".concat(r,".").concat(m)]||p[m]||h[m]||a;return n?o.createElement(u,l(l({ref:t},c),{},{components:n})):o.createElement(u,l({ref:t},c))}));function x(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<a;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},94263:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var o=n(83117),i=n(80102),a=(n(67294),n(3905)),r=["components"],l={id:"troubleshooting",title:"Flexbox Troubleshooting"},s=void 0,c={unversionedId:"mainconcepts/troubleshooting",id:"mainconcepts/troubleshooting",title:"Flexbox Troubleshooting",description:"There are few issues you may face while using flexbox. This section discusses the more common of those issues, which may prove useful when debugging and finding issues in layout.",source:"@site/../docs/mainconcepts/troubleshooting.mdx",sourceDirName:"mainconcepts",slug:"/mainconcepts/troubleshooting",permalink:"/docs/mainconcepts/troubleshooting",draft:!1,editUrl:"https://github.com/facebook/litho/edit/master/website/../docs/mainconcepts/troubleshooting.mdx",tags:[],version:"current",frontMatter:{id:"troubleshooting",title:"Flexbox Troubleshooting"},sidebar:"mainSidebar",previous:{title:"Yoga Playground",permalink:"/docs/mainconcepts/yoga-playground"},next:{title:"Keys and Component Identity",permalink:"/docs/mainconcepts/coordinate-state-actions/keys-and-identity"}},p={},d=[{value:"Why is my text truncated?",id:"why-is-my-text-truncated",level:2},{value:"How to build overlapping components?",id:"how-to-build-overlapping-components",level:2},{value:"How to centre components?",id:"how-to-centre-components",level:2},{value:"If you&#39;ve defined flexGrow/flexShrink but it doesn&#39;t do anything",id:"if-youve-defined-flexgrowflexshrink-but-it-doesnt-do-anything",level:2},{value:"When keyboard opens then the content is cut off",id:"when-keyboard-opens-then-the-content-is-cut-off",level:2}],m={toc:d};function h(e){var t=e.components,n=(0,i.Z)(e,r);return(0,a.mdx)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"There are few issues you may face while using flexbox. This section discusses the more common of those issues, which may prove useful when debugging and finding issues in layout."),(0,a.mdx)("p",null,"For debugging, you can also refer to the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/debugging/debugging-tips#layout-inspector-plugin"},"Flipper layout inspector plugin")," to see the component hierarchy and you can update the flex properties in the plugin itself to understand how it affects layout."),(0,a.mdx)("p",null,"Another tool that can be used for understanding and playing around with flexbox properties is ",(0,a.mdx)("a",{parentName:"p",href:"https://yogalayout.com/playground"},"Yoga Playground"),"."),(0,a.mdx)("h2",{id:"why-is-my-text-truncated"},"Why is my text truncated?"),(0,a.mdx)("p",null,"One common problem is that there is not enough space for content to be visible on the screen and therefore text gets truncated.\nThe default value of flexShrink is 1.0f. So, if there is not enough space available for the text to render completely then text will shrink and you will see truncated text on the screen. Changing the flexShrink value to zero makes sure that text component is not shrinked."),(0,a.mdx)("p",null,"Imagine there are two text components in a Row. If no flex properties are defined on either of the text components, then they both will take equal space and text will be truncated if text is too long to fit into available space.\nNow, if flexShrink = 0f is added to the first text, then it won't shrink and take up the whole space to render itself completely; the second text will take up the remaining space."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/documentation/flexbox/TextInRow.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/documentation/flexbox/TextInRow.kt",start:"start_example",end:"end_example"},'override fun ComponentScope.render(): Component {\n  return Row(style = Style.padding(16.dp)) {\n    child(\n        Text(\n            style =\n                Style.flex(shrink = 0f), // If flexShrink is 1f then this text will be truncated\n            text = "This is a really long text.",\n            textSize = 20.sp,\n            maxLines = 1))\n    child(\n        Text(\n            style = Style.margin(start = 8.dp),\n            text = "Another long text",\n            textSize = 20.sp,\n            maxLines = 1))\n  }\n}\n')),(0,a.mdx)("p",null,"However, if the second text is still truncated, based on your requirements, then either you can make it multiline text or display the two texts inside a Column."),(0,a.mdx)("p",null,"Another scenario where text can get truncated is if you have exact width and height defined on a sibling component which is taking up all the available space and not allowing other children to grow.\nIn this case, you can either remove the exact width / height defined so that both siblings can grow and take up the available space or set flexShrink to zero on sibling component."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/documentation/flexbox/TextInsideContainer.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/documentation/flexbox/TextInsideContainer.kt",start:"start_example",end:"end_example"},'override fun ComponentScope.render(): Component {\n  return Column(style = Style.height(135.dp).padding(16.dp)) {\n    child(\n        Column(style = Style.heightPercent(100f).widthPercent(100f)) {\n          // either remove widthPercent / heightPercent here so that both siblings can grow\n          // equally\n          child(Text(text = "This is a really long text.", textSize = 20.sp, maxLines = 1))\n          child(\n              Text(\n                  style = Style.margin(top = 8.dp),\n                  text = "Subtitle text",\n                  textSize = 20.sp,\n                  maxLines = 1))\n        })\n    child(\n        Text(\n            // or add flex(shrink = 0f) so that this component does not shrink\n            style = Style.margin(top = 16.dp),\n            text = "Small footer text",\n            textSize = 20.sp,\n            maxLines = 1))\n  }\n}\n')),(0,a.mdx)("h2",{id:"how-to-build-overlapping-components"},"How to build overlapping components?"),(0,a.mdx)("p",null,"You can achieve this by using position type as YogaPositionType.ABSOLUTE. You can also set exact position left/right coordinates for the starting position of the absolute child.\nFor information on making components overlap each other, refer to the ",(0,a.mdx)("a",{parentName:"p",href:"#absolutely-positioned-items"},"Absolutely positioned items")," section, above."),(0,a.mdx)("h2",{id:"how-to-centre-components"},"How to centre components?"),(0,a.mdx)("p",null,"Use the following to centre your components:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"#distribution-along-the-cross-axis"},"alignItems")," ",(0,a.mdx)("inlineCode",{parentName:"li"},"CENTER")," - example usage: you want to centre component inside Row along the vertical axis."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"/docs/mainconcepts/flexbox-yoga#distribution-along-the-main-axis"},"justifyContent")," ",(0,a.mdx)("inlineCode",{parentName:"li"},"CENTER")," - example usage: you want to centre component inside Row along the horizontal axis.")),(0,a.mdx)("p",null,"If it is specific to Text then consider using verticalGravity / horizontalGravity on the Text component to keep it centre aligned:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin"},'  Text(\n    text = "Align this text at centre vertically using vertical gravity",\n    verticalGravity = VerticalGravity.CENTER,\n    textSize = 20.sp))\n')),(0,a.mdx)("h2",{id:"if-youve-defined-flexgrowflexshrink-but-it-doesnt-do-anything"},"If you've defined flexGrow/flexShrink but it doesn't do anything"),(0,a.mdx)("p",null,"If the parent has fixed width/height then flexGrow/flexshrink is not expected to work correctly since there is not enough space for it to work with. Check in your component hierarchy if the component which is getting clipped has enough width/height needed to render it completely."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/documentation/flexbox/TextInColumnWithExactHeight.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/documentation/flexbox/TextInColumnWithExactHeight.kt",start:"start_example",end:"end_example"},'override fun ComponentScope.render(): Component {\n  return Column(style = Style.height(50.dp).padding(16.dp)) { // exact height defined here\n    child(\n        Text(\n            style =\n                Style.flex(\n                    shrink =\n                        0f), // Even with flexShrink zero, text will be cut as there is not enough\n            // space\n            text = "This is a really long text.",\n            textSize = 20.sp,\n            maxLines = 1))\n    child(\n        Text(\n            style = Style.margin(start = 8.dp),\n            text = "Another long text",\n            textSize = 20.sp,\n            maxLines = 1))\n  }\n}\n')),(0,a.mdx)("h2",{id:"when-keyboard-opens-then-the-content-is-cut-off"},"When keyboard opens then the content is cut off"),(0,a.mdx)("p",null,"When you have a screen where in different scenarios the keyboard is open as layout contains a TextInput. The same layout now needs to fit inside lesser space (height in this case).\nThere are multiple ways to solve this:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},"Check if your text is not cut off due to ",(0,a.mdx)("a",{parentName:"p",href:"#why-is-my-text-truncated"},"flex shrink issues")," or maybe you are setting ",(0,a.mdx)("a",{parentName:"p",href:"#if-youve-defined-flexgrowflexshrink-but-it-doesnt-do-anything"},"exact width / height on parent components")," in the hierarchy.")),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},"Make your content scrollable by placing your content in a VerticalScroll."),(0,a.mdx)("pre",{parentName:"li"},(0,a.mdx)("code",{parentName:"pre",className:"language-kotlin",metastring:"file=sample/src/main/java/com/facebook/samples/litho/documentation/flexbox/ContentInVerticalScroll.kt start=start_example end=end_example",file:"sample/src/main/java/com/facebook/samples/litho/documentation/flexbox/ContentInVerticalScroll.kt",start:"start_example",end:"end_example"},'override fun ComponentScope.render(): Component = VerticalScroll {\n  Column {\n    for (i in 0..20) {\n      child(\n          Text(\n              style = Style.padding(16.dp).margin(top = 8.dp),\n              text = "Text counter = " + i,\n              textSize = 20.sp,\n              maxLines = 1))\n    }\n  }\n}\n'))),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("p",{parentName:"li"},"Keep a state value that informs you if the keyboard is open or not, then change your layout depending on the state."))))}h.isMDXComponent=!0}}]);